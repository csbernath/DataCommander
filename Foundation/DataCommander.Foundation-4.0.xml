<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Foundation</name>
    </assembly>
    <members>
        <member name="T:Foundation.Collections.BinarySearch">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.BinarySearch.IndexOf(System.Int32,System.Int32,System.Func{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="minIndex"></param>
            <param name="maxIndex"></param>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.BinarySearch.Search(System.Int32,System.Int32,System.Func{System.Int32,System.Boolean},System.Func{System.Int32,System.Boolean})">
            <summary>
            
            </summary>
            <param name="minIndex"></param>
            <param name="maxIndex"></param>
            <param name="lessThan"></param>
            <param name="equals"></param>
        </member>
        <member name="T:Foundation.Collections.BitVector64">
            <exclude/>
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.BitVector64.#ctor(System.UInt64)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Foundation.Collections.BitVector64.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.BitVector64.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.BitVector64.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.CircularBuffer`1">
            <summary>
            https://en.wikipedia.org/wiki/Circular_buffer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:Foundation.Collections.CircularBuffer`1.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.CircularBuffer`1.AddHead(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.CircularBuffer`1.AddTail(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.CircularBuffer`1.AddTail(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Foundation.Collections.CircularBuffer`1.PeekHead">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.CircularBuffer`1.RemoveHead">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.CircularBuffer`1.PeekTail">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.CircularBuffer`1.RemoveTail">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.CircularBuffer`1.SetCapacity(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:Foundation.Collections.CircularBuffer`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.CircularBuffer`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.LargeObjectHeap">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.LargeObjectHeap.GetSmallArrayMaxLength(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemSize"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.MemberComparer`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="M:Foundation.Collections.MemberComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IComparer{`1})">
            <summary>
            
            </summary>
            <param name="get"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Foundation.Collections.MemberComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            
            </summary>
            <param name="get"></param>
        </member>
        <member name="T:Foundation.Collections.MultipleMemberComparer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.MultipleMemberComparer`1.#ctor(System.Collections.Generic.IComparer{`0}[])">
            <summary>
            
            </summary>
            <param name="comparers"></param>
        </member>
        <member name="T:Foundation.Collections.ObjectPool2.ObjectPool`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.ObjectPool2.ObjectPool`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ObjectPool2.ObjectPool`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="object"></param>
        </member>
        <member name="M:Foundation.Collections.ObjectPool2.ObjectPool`1.TryRemove(`0@)">
            <summary>
            
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.ObjectPool2.ObjectPoolExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ObjectPool2.ObjectPoolExtensions.Get``1(Foundation.Collections.ObjectPool2.ObjectPool{``0},System.Func{``0})">
            <summary>
            
            </summary>
            <param name="objectPool"></param>
            <param name="create"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.ObjectPool2.PooledObject`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.ObjectPool2.PooledObject`1.#ctor(Foundation.Collections.ObjectPool2.ObjectPool{`0},System.Func{`0})">
            <summary>
            
            </summary>
            <param name="objectPool"></param>
            <param name="create"></param>
        </member>
        <member name="P:Foundation.Collections.ObjectPool2.PooledObject`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.PreOrderTreeTraversal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.PreOrderTreeTraversal.ForEach``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rootNode"></param>
            <param name="getChildNodes"></param>
            <param name="action"></param>
        </member>
        <member name="M:Foundation.Collections.PreOrderTreeTraversal.FirstOrDefault``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rootNode"></param>
            <param name="getChildNodes"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.SegmentedArrayBuilder`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.SegmentedArrayBuilder`1.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <param name="segmentLength"></param>
        </member>
        <member name="M:Foundation.Collections.SegmentedArrayBuilder`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.SegmentedArrayBuilder`1.ToReadOnlyList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.DisposableCollection`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.DisposableCollection`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.DynamicArray`1">
            <summary>
            https://en.wikipedia.org/wiki/Dynamic_array
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.DynamicArray`1.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="initialSize"></param>
            <param name="maxSize"></param>
        </member>
        <member name="M:Foundation.Collections.DynamicArray`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.DynamicArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="P:Foundation.Collections.DynamicArray`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.DynamicArray`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.DynamicArray`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.DynamicArray`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.DynamicArray`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.DynamicArray`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.DynamicArray`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.GetKeyResponse`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.GetKeyResponse`1.#ctor(System.Boolean,`0)">
            <summary>
            
            </summary>
            <param name="hasKey"></param>
            <param name="key"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.GetKeyResponse`1.HasKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.GetKeyResponse`1.Key">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.GetKeyResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.GetKeyResponse.Create``1(System.Boolean,``0)">
            <summary>
            
            </summary>
            <param name="hasKey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.ICollectionIndex`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.ICollectionIndex`1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.IndexableCollection`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Implemented index types:
            <list type="table">
            <listheader>
                    <term>heaterm1</term>
                    <description>headesc1</description>
            </listheader>
                <item>
                    <term><see cref="T:Foundation.Collections.IndexableCollection.UniqueIndex`2" /></term>
                    <description>desc1</description>
                </item>
                <item>
                    <term><see cref="T:Foundation.Collections.IndexableCollection.UniqueListIndex`2" /></term>
                    <description>desc1</description>
                </item>
                <item>
                    <term><see cref="T:Foundation.Collections.IndexableCollection.NonUniqueIndex`2" /></term>
                    <description>desc2</description>
                </item>
                <item>
                    <term><see cref="T:Foundation.Collections.IndexableCollection.SequenceIndex`2" /></term>
                    <description></description>
                </item>
                <item>
                    <term><see cref="T:Foundation.Collections.IndexableCollection.ListIndex`1" /></term>
                    <description>desc1</description>
                </item>
                <item>
                    <term><see cref="T:Foundation.Collections.IndexableCollection.LinkedListIndex`1" /></term>
                    <description>desc1</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexableCollection`1.#ctor(Foundation.Collections.IndexableCollection.ICollectionIndex{`0})">
            <summary>
            
            </summary>
            <param name="defaultIndex"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.IndexableCollection`1.Indexes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.IndexableCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.IndexableCollection`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexableCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexableCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexableCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexableCollection`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexableCollection`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.IndexCollection`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexCollection`1.Add(Foundation.Collections.IndexableCollection.ICollectionIndex{`0})">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.IndexCollection`1.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexCollection`1.Contains(Foundation.Collections.IndexableCollection.ICollectionIndex{`0})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexCollection`1.CopyTo(Foundation.Collections.IndexableCollection.ICollectionIndex{`0}[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.IndexCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.IndexCollection`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexCollection`1.Remove(Foundation.Collections.IndexableCollection.ICollectionIndex{`0})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexCollection`1.TryGetValue(System.String,Foundation.Collections.IndexableCollection.ICollectionIndex{`0}@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.IndexCollection`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.LinkedListIndex`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.LinkedListIndex`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.LinkedListIndex`1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.LinkedListIndex`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.LinkedListIndex`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.LinkedListIndex`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.LinkedListIndex`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.LinkedListIndex`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.LinkedListIndex`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.LinkedListIndex`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.LinkedListIndex`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.LinkedListIndex`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.ListIndex`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.#ctor(System.String,System.Collections.Generic.IList{`0})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="list"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.ListIndex`1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.ListIndex`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.ListIndex`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.ListIndex`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.NonUniqueIndex`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.#ctor(System.String,System.Func{`1,Foundation.Collections.IndexableCollection.GetKeyResponse{`0}},System.Collections.Generic.IDictionary{`0,System.Collections.Generic.ICollection{`1}},System.Func{System.Collections.Generic.ICollection{`1}})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="getKey"></param>
            <param name="dictionary"></param>
            <param name="createCollection"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.#ctor(System.String,System.Func{`1,Foundation.Collections.IndexableCollection.GetKeyResponse{`0}},Foundation.Collections.IndexableCollection.SortOrder)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="getKey"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.TryGetFirstValue(`0,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.Add(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.Contains(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.System#Collections#Generic#ICollection{T}#CopyTo(`1[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.Remove(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.NonUniqueIndex`2.TryGetValue(`0,System.Collections.Generic.ICollection{`1}@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.ReversedComparer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.ReversedComparer`1.Default">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.SequenceIndex`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.SequenceIndex`2.#ctor(System.String,System.Func{`0},System.Func{`1,`0},System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="getNextKey"></param>
            <param name="getKey"></param>
            <param name="dictionary"></param>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.SortOrder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Collections.IndexableCollection.SortOrder.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Collections.IndexableCollection.SortOrder.Ascending">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Collections.IndexableCollection.SortOrder.Descending">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.UniqueIndex`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.#ctor(System.String,System.Func{`1,Foundation.Collections.IndexableCollection.GetKeyResponse{`0}},System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="getKey"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.#ctor(System.String,System.Func{`1,Foundation.Collections.IndexableCollection.GetKeyResponse{`0}},Foundation.Collections.IndexableCollection.SortOrder)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="getKey"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.UniqueIndex`2.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.UniqueIndex`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.UniqueIndex`2.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.UniqueIndex`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.CopyTo(`1[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.TryGetValue(`0,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#Generic#ICollection{T}#Add(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.Contains(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#Generic#ICollection{T}#Remove(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#Generic#IDictionary{TKey,T}#Add(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.UniqueIndex`2.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#Generic#IDictionary{TKey,T}#Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.UniqueIndex`2.Values">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,T}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,T}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,T}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueIndex`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.IndexableCollection.UniqueListIndex`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueListIndex`2.#ctor(System.String,System.Func{`1,`0},System.Collections.Generic.IList{`1})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="keySelector"></param>
            <param name="list"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.UniqueListIndex`2.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueListIndex`2.Add(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueListIndex`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueListIndex`2.Contains(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueListIndex`2.CopyTo(`1[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.UniqueListIndex`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.IndexableCollection.UniqueListIndex`2.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueListIndex`2.Remove(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.IndexableCollection.UniqueListIndex`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.KeyValuePair">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.KeyValuePair.Create``2(``0,``1)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.LinearSearch">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.LinearSearch.IndexOf(System.Int32,System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            
            </summary>
            <param name="minIndex"></param>
            <param name="maxIndex"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.LinearSearch.LastIndexOf(System.Int32,System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            
            </summary>
            <param name="minIndex"></param>
            <param name="maxIndex"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.MemberEqualityComparer`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="M:Foundation.Collections.MemberEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            
            </summary>
            <param name="get"></param>
        </member>
        <member name="M:Foundation.Collections.MemberEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            
            </summary>
            <param name="get"></param>
            <param name="equalityComparer"></param>
        </member>
        <member name="T:Foundation.Collections.MultipleMemberEqualityComparer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.MultipleMemberEqualityComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0}[])">
            <summary>
            
            </summary>
            <param name="equalityComparers"></param>
        </member>
        <member name="T:Foundation.Collections.ObjectPool.IPoolableObjectFactory`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ObjectPool.IPoolableObjectFactory`1.CreateObject">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.ObjectPool.IPoolableObjectFactory`1.InitializeObject(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Collections.ObjectPool.IPoolableObjectFactory`1.DestroyObject(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Foundation.Collections.ObjectPool.ObjectPool`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ObjectPool.ObjectPool`1.#ctor(Foundation.Collections.ObjectPool.IPoolableObjectFactory{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="factory"></param>
            <param name="minSize"></param>
            <param name="maxSize"></param>
        </member>
        <member name="M:Foundation.Collections.ObjectPool.ObjectPool`1.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.ObjectPool.ObjectPool`1.MinSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.ObjectPool.ObjectPool`1.MaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.ObjectPool.ObjectPool`1.IdleCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.ObjectPool.ObjectPool`1.ActiveCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ObjectPool.ObjectPool`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ObjectPool.ObjectPool`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.ObjectPool.ObjectPoolItem`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Foundation.Collections.ObjectPool.PooledObject`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ObjectPool.PooledObject`1.#ctor(Foundation.Collections.ObjectPool.ObjectPool{`0})">
            <summary>
            
            </summary>
            <param name="pool"></param>
        </member>
        <member name="P:Foundation.Collections.ObjectPool.PooledObject`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ObjectPool.PooledObject`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.ReadOnlyArray`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.ReadOnlyArray`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.ReadOnlyArray`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.ReadOnlyArray`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.ReadOnlyArray`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.ReadOnlyListSegment`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.ReadOnlyListSegment`1.#ctor(System.Collections.Generic.IReadOnlyList{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:Foundation.Collections.ReadOnlyListSegment`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.ReadOnlyListSegment`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ReadOnlyListSegment`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.ReadOnlyNonUniqueSortedList`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Foundation.Collections.ReadOnlyNonUniqueSortedList`2.#ctor(System.Collections.Generic.IReadOnlyList{`1},System.Func{`1,`0},System.Comparison{`0})">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="keySelector"></param>
            <param name="comparison"></param>
        </member>
        <member name="M:Foundation.Collections.ReadOnlyNonUniqueSortedList`2.#ctor(System.Collections.Generic.IReadOnlyList{`1},System.Func{`1,`0})">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="keySelector"></param>
        </member>
        <member name="P:Foundation.Collections.ReadOnlyNonUniqueSortedList`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.ReadOnlyNonUniqueSortedList`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.ReadOnlyNonUniqueSortedList`2.GetGroups">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.ReadOnlyNonUniqueSortedList`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.ReadOnlySortedList`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Foundation.Collections.ReadOnlySortedList`2.#ctor(System.Collections.Generic.IReadOnlyList{`1},System.Func{`1,`0},System.Comparison{`0})">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="keySelector"></param>
            <param name="comparison"></param>
        </member>
        <member name="M:Foundation.Collections.ReadOnlySortedList`2.#ctor(System.Collections.Generic.IReadOnlyList{`1},System.Func{`1,`0})">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="keySelector"></param>
        </member>
        <member name="M:Foundation.Collections.ReadOnlySortedList`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.ReadOnlySortedList`2.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ReadOnlySortedList`2.TryGetValue(`0,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.ReadOnlySortedList`2.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.ReadOnlySortedList`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.ReadOnlySortedList`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.ReadOnlySortedList`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.SegmentedCollection`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.SegmentedCollection`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="segmentLength"></param>
        </member>
        <member name="M:Foundation.Collections.SegmentedCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Collections.SegmentedCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.SegmentedCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Collections.SegmentedCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.SegmentedListBuilder`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.SegmentedListBuilder`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="segmentItemCapacity"></param>
        </member>
        <member name="M:Foundation.Collections.SegmentedListBuilder`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Foundation.Collections.SegmentedListBuilder`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.SegmentedListBuilder`1.ToReadOnlyList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.Variant`3">
            <summary>
            Discrete union
            </summary>
        </member>
        <member name="M:Foundation.Collections.Variant`3.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Collections.Variant`3.#ctor(`1)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Collections.Variant`3.#ctor(`2)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Collections.Variant`3.op_Implicit(`0)~Foundation.Collections.Variant{`0,`1,`2}">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Collections.Variant`3.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Collections.Variant`3.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Collections.VariantExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.VariantExtensions.Action``3(Foundation.Collections.Variant{``0,``1,``2},System.Action{``0},System.Action{``1},System.Action{``2})">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="variant"></param>
            <param name="action1"></param>
            <param name="action2"></param>
            <param name="action3"></param>
        </member>
        <member name="M:Foundation.Collections.VariantExtensions.Function``4(Foundation.Collections.Variant{``0,``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="variant"></param>
            <param name="function0"></param>
            <param name="function1"></param>
            <param name="function2"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Collections.TypeDictionary`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.TypeDictionary`1.Add``1(`0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Collections.TypeDictionary`1.TryGetValue``1(`0@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Collections.TypeDictionary`1.GetValueOrDefault(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Collections.TypeDictionary`1.GetValueOrDefault``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.ApplicationData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ApplicationData.RootNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ApplicationData.CurrentNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ApplicationData.CurrentType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ApplicationData.GetApplicationDataFolderPath(System.Boolean)">
            <summary>
            
            </summary>
            <param name="versioned"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ApplicationData.Load(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:Foundation.Configuration.ApplicationData.Load(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="sectionName"></param>
        </member>
        <member name="M:Foundation.Configuration.ApplicationData.Save(System.Xml.XmlWriter,System.String)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
            <param name="sectionName"></param>
        </member>
        <member name="M:Foundation.Configuration.ApplicationData.Save(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="sectionName"></param>
        </member>
        <member name="M:Foundation.Configuration.ApplicationData.Save">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ApplicationData.CreateNode(System.String)">
            <summary>
            
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.AppSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.AppSettings.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.AppSettings.CurrentType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Configuration.AppSettings.Reader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Configuration.AppSettings.PrefixedReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttribute.#ctor(System.String,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="description"></param>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationAttribute.Description">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttribute.GetValue``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttribute.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttribute.Write(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationAttribute.XmlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttribute.XmlHelper.Serialize(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>        
        </member>
        <member name="T:Foundation.Configuration.ConfigurationAttributeCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationAttributeCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationAttributeCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationAttributeCollection.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.Add(System.String,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="description"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.IndexOf(Foundation.Configuration.ConfigurationAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.Insert(System.Int32,Foundation.Configuration.ConfigurationAttribute)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.TryGetValue(System.String,Foundation.Configuration.ConfigurationAttribute@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.TryGetAttributeValue``1(System.String,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.TryGetAttributeValue``1(System.String,``0,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.SetAttributeValue(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.Add(Foundation.Configuration.ConfigurationAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.Contains(Foundation.Configuration.ConfigurationAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.CopyTo(Foundation.Configuration.ConfigurationAttribute[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationAttributeCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationAttributeCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.Remove(Foundation.Configuration.ConfigurationAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationAttributeCollectionDebugger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationAttributeCollectionDebugger.#ctor(Foundation.Configuration.ConfigurationAttributeCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationElementName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Configuration.ConfigurationElementName.Node">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Configuration.ConfigurationElementName.Attribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Configuration.ConfigurationNode.Delimiter">
            <summary>
            The path delimiter in the nodeName. E.g.: Node1/Node2/Node3.
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNode.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNode.HasName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNode.Name">
            <summary>
            Gets the name of the node.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNode.Description">
            <summary>
            Gets/sets the description of the node.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNode.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNode.FullName">
            <summary>
            Gets the full path of the node.
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNode.AddChildNode(Foundation.Configuration.ConfigurationNode)">
            <summary>
            
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNode.InsertChildNode(System.Int32,Foundation.Configuration.ConfigurationNode)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="childNode"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNode.RemoveChildNode(Foundation.Configuration.ConfigurationNode)">
            <summary>
            
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNode.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNode.CreateNode(System.String)">
            <summary>
            
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNode.SelectNode(System.String)">
            <summary>
            Finds recursively a node under the node.
            </summary>
            <param name="path">Name of the child node.
            The name can contains path delimiters.</param>
            <returns>Return the child node is found.
            Returns null if no child node found.</returns>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNode.Attributes">
            <summary>
            Gets the attributes stored in this node.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNode.ChildNodes">
            <summary>
            Gets the child nodes of this node.
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNode.Write(System.IO.TextWriter)">
            <summary>
            Writes the content of this node (attributes and child nodes)
            of this node to the specified <paramref name="textWriter"/>.
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNode.WriteDocumentation(System.IO.TextWriter,System.Int32)">
            <summary>
            Writes the documentation of this node to the specified <paramref name="textWriter" />.
            </summary>
            <param name="textWriter"></param>
            <param name="level">Recursion level</param>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationNodeCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNodeCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNodeCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeCollection.TryGetValue(System.String,Foundation.Configuration.ConfigurationNode@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeCollection.Add(Foundation.Configuration.ConfigurationNode)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeCollection.Contains(Foundation.Configuration.ConfigurationNode)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeCollection.CopyTo(Foundation.Configuration.ConfigurationNode[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNodeCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationNodeCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeCollection.Remove(Foundation.Configuration.ConfigurationNode)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationNodeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeName.FromNamespace(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            
            </summary>
            <param name="trace"></param>
            <param name="frameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeName.FromType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationNodeTree">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeTree.LoadXml(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="sectionName"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeTree.Save(System.Xml.XmlWriter,System.String)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
            <param name="sectionName"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeTree.GetXml(System.String)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationNodeTree.SelectNode(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationReader">
            <summary>
            config file section reader.
            Reads nodes and attributes in the DataCommander.Foundation.Configuration section.
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationReader.FindSection(System.String)">
            <summary>
            Finds the section DataCommander.Foundation.Configuration in the config file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationReader.Read(System.Xml.XmlReader,System.String,System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            
            </summary>
            <param name="xmlReader"></param>
            <param name="configFilename"></param>
            <param name="sectionName"></param>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationReader.Read(System.String,System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Reads a config file into memory.
            </summary>
            <param name="configFileName">The name of the file to read</param>
            <param name="sectionName"></param>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationReader.Read(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="xmlReader"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationSection">
            <summary>
            Loads and parses the <c><DataCommander.Foundation.Configuration /></c> xml element from the config file.
            </summary>
            <remarks>
            <code escaped="true">
            <SectionName1>
              <NodeName1>
                       <NodeName11>
                           <attribute name="" type="" value="" />
                       </NodeName11>
              </NodeName1>
              ...
              <NodeNameN>
              </NodeNameN>
            </SectionName1>
            </code>
            
            Available attribute types: 
            
            
            <list type="table">
                   <listheader>
                       <term>Type</term>
                       <description>Description</description>
                   </listheader>
                   <item>
                       <term>
                           <see cref="T:System.Boolean">bool</see>,
                           <see cref="T:System.Int32">int</see>,
                           <see cref="T:System.String">string</see>
                           etc.
                       </term>
                       <description>See <see href="ms-help://MS.MSDNQTR.2003APR.1033/csref/html/vclrfbuiltintypes.htm">Built-in Types Table</see> in C# Programmer's Reference.</description>
                   </item>
                   <item>
                       <term>arrays like
                           <see cref="T:System.Boolean">bool</see>[],
                           <see cref="T:System.Int32">int</see>[],
                           <see cref="T:System.String">string</see>[]
                           etc.
                       </term>
                       <description></description>
                   </item>
                   <item>
                       <term><see cref="T:System.Byte">byte</see>[]</term>
                       <description>base64 encoded byte array</description>
                   </item>
                   <item>
                       <term>datetime</term>
                       <description><see cref="T:System.DateTime"/></description>
                   </item>
                   <item>
                       <term><see cref="T:System.TimeSpan">System.TimeSpan</see></term>
                       <description></description>
                   </item>
                   <item>
                       <term>enumeration types</term>
                       <description></description>
                   </item>
                   <item>
                       <term>xmlnode</term>
                       <description><see cref="T:System.Xml.XmlNode"/></description>
                   </item>
                   <item>
                       <term></term>
                       <description></description>
                   </item>
                   <item>
                       <term></term>
                       <description></description>
                   </item>
                   <item>
                       <term></term>
                       <description></description>
                   </item>
            </list>
            </remarks>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationSection.#ctor(System.String,System.String)">
            <summary>
            Reads configuration settings from the specified <paramref name="configFileName"/>.
            </summary>
            <param name="configFileName"></param>
            <param name="sectionName"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationSection.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="configFileName"></param>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationSection.DefaultSectionName">
            <summary>
            
            </summary>
        </member>
        <member name="E:Foundation.Configuration.ConfigurationSection.Changed">
            <summary>
            RootNode can inform the caller about config file changes here.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationSection.RootNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationSection.CurrentNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationSection.CurrentType">
            <summary>
            Gets the node correspoding to the caller's type.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationSection.CurrentMethod">
            <summary>
            Gets the node corresponding to the caller's method.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationSection.ConfigFileName">
            <summary>
            Gets the name of file which the config is loaded from.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationSection.SectionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.ConfigurationSection.IsFileSystemWatcherEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationSection.SelectNode(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="nodeName"></param>
            <param name="throwOnError"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.ConfigurationWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationWriter.WriteNode(System.Xml.XmlWriter,Foundation.Configuration.ConfigurationNode)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
            <param name="node"></param>
        </member>
        <member name="M:Foundation.Configuration.ConfigurationWriter.Write(System.Xml.XmlWriter,Foundation.Configuration.ConfigurationAttributeCollection)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
            <param name="attributes"></param>
        </member>
        <member name="T:Foundation.Configuration.IniReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.IniReader.Read(System.IO.TextReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.TryGetValue`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.NameValueCollectionReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Configuration.NameValueCollectionReader.TryParse`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.#ctor(Foundation.Configuration.TryGetValue{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="tryGetValue"></param>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.GetValue``1(System.String,Foundation.Configuration.NameValueCollectionReader.TryParse{``0},``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="tryParse"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.GetBoolean(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.GetDouble(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.GetInt32(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.GetString(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetBoolean(System.String,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="provider"></param>
            <param name="styles"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetDouble(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="style"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetEnum``1(System.String,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetInt16(System.String,System.Int16@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetInt32(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetInt64(System.String,System.Int64@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="style"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetString(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetTimeSpan(System.String,System.TimeSpan@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.NameValueCollectionReader.TryGetValue``1(System.String,Foundation.Configuration.NameValueCollectionReader.TryParse{``0},``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="tryParse"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.SectionHandler">
            <exclude/>
        </member>
        <member name="P:Foundation.Configuration.SectionHandler.Section">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Configuration.Settings">
            <summary>
            This class is a singleton which holds a <see cref="T:Foundation.Configuration.ConfigurationSection"/> instance.
            </summary>
        </member>
        <member name="F:Foundation.Configuration.Settings._configFileName">
            <summary>
            The config file name.
            </summary>
        </member>
        <member name="F:Foundation.Configuration.Settings._section">
            <summary>
            The ConfigurationSection instance.
            </summary>
        </member>
        <member name="E:Foundation.Configuration.Settings.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.Settings.ConfigFileName">
            <summary>
            Uses <see cref="T:Foundation.Configuration.AppSettings"/> to retrieve "ConfigFileName" from the app.config file.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.Settings.RootNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.Settings.Section">
            <summary>
            Gets the <see cref="T:Foundation.Configuration.ConfigurationSection" /> instance.
            Initializes the instance at first call.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.Settings.SectionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.Settings.CurrentMethod">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Configuration.Settings.CurrentType">
            <summary>
            Gets the config node of the calling method's type.
            </summary>
        </member>
        <member name="P:Foundation.Configuration.Settings.CurrentNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.Settings.GetAssemblyConfigFileName(System.Reflection.Assembly)">
            <summary>
            Computes the config file name from the given assembly's CodeBase.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.Settings.SelectNode(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="nodeName"></param>
            <param name="throwOnError"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.Settings.SelectCurrentType">
            <summary>
            Finds the config node of the calling method's type.
            </summary>
            <returns>null, if not found and no exception is thrown.</returns>
        </member>
        <member name="T:Foundation.Configuration.TypeNameCollection">
            <summary>
            Summary description for TypeNames.
            </summary>
        </member>
        <member name="M:Foundation.Configuration.TypeNameCollection.GetTypeName(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Configuration.XmlAttributeReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Configuration.XmlAttributeReader.#ctor(System.Xml.XmlAttributeCollection)">
            <summary>
            
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:Foundation.Configuration.XmlAttributeReader.TryGetValue(System.Xml.XmlAttributeCollection,System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="attributes"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Configuration.XmlAttributeReader.TryGetValue(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.AsyncDbCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.AsyncDbCommand.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.AsyncDbCommand.Prepare">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.AsyncDbCommand.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.AsyncDbCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.AsyncDbCommand.ExecuteScalar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.AsyncDbCommand.ExecuteNonQuery">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.AsyncDbCommand.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.AsyncDbCommand.CreateParameter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.AsyncDbCommand.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.AsyncDbCommand.UpdatedRowSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.AsyncDbCommand.CommandText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.AsyncDbCommand.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.AsyncDbCommand.Transaction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.AsyncDbCommand.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.AsyncDbConnection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.AsyncDbConnection.#ctor(System.Data.IDbConnection,System.String)">
            <summary>
            
            </summary>
            <param name="cloneableConnection"></param>
            <param name="threadName"></param>
        </member>
        <member name="M:Foundation.Data.AsyncDbConnection.ChangeDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:Foundation.Data.AsyncDbConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.AsyncDbConnection.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.AsyncDbConnection.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.AsyncDbConnection.CreateCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.AsyncDbConnection.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.AsyncDbConnection.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.AsyncDbConnection.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.AsyncDbConnection.ConnectionTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.AsyncDbConnection.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.SqlClient.ExternalSystem">
            <summary>
            This class provides a mechanism to store security sensitive data (like passwords) in a safe way.
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.ExternalSystem.GetProperties(System.String,System.Data.IDbConnection)">
            <summary>
            Gets the properties of an external system related to a specfied external system client.
            </summary>
            <param name="name">See icCore.dbo.ExternalSystem table</param>
            <param name="connection">Microsoft SQL Server connection</param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.ExternalSystem.Encrypt(System.Security.Cryptography.DataProtectionScope,System.String)">
            <summary>
            
            </summary>
            <param name="scope"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.ExternalSystem.Decrypt(System.Security.Cryptography.DataProtectionScope,System.Byte[])">
            <summary>
            
            </summary>
            <param name="scope"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.ExternalSystem.Check(System.Security.Cryptography.DataProtectionScope,System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="scope"></param>
            <param name="bytes"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.ExternalSystem.ExternalSystem_GetProperties(System.Data.IDbConnection,System.String)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="systemName">varchar(64)</param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.ExternalSystemPropertyTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.SqlClient.ExternalSystemPropertyTypes.String">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.SqlClient.ExternalSystemPropertyTypes.Int32">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.SqlClient.ExternalSystemPropertyTypes.Encrypted">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.SqlClient.NativeSqlCommandFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.NativeSqlCommandFactory.CreateConnection(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="userName"></param>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.NativeSqlCommandFactory.CreateConnectionHelper(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SafeLoggedSqlConnection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SafeLoggedSqlConnection.#ctor(Foundation.Data.SqlClient.SqlLog.SqlLog,System.Int32,System.String,System.String,System.String,Foundation.Data.SqlClient.SqlLoggedSqlConnection.ISqlLoggedSqlCommandFilter,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="sqlLog"></param>
            <param name="applicationId"></param>
            <param name="userName"></param>
            <param name="hostName"></param>
            <param name="connectionString"></param>
            <param name="filter"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Foundation.Data.SqlClient.SafeLoggedSqlConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SafeLoggedSqlConnectionFactory.#ctor(System.String,System.String,Foundation.Data.SqlClient.SqlLoggedSqlConnection.ISqlLoggedSqlCommandFilter)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="applicationName"></param>
            <param name="filter"></param>
        </member>
        <member name="P:Foundation.Data.SqlClient.SafeLoggedSqlConnectionFactory.Thread">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SafeLoggedSqlConnectionFactory.CreateConnection(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="userName"></param>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SafeLoggedSqlConnectionFactory.CreateConnectionHelper(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SafeSqlConnection">
            <summary>
            Safe SQL Server connection for Windows Services.
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SafeSqlConnection.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SafeSqlConnection.#ctor(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Foundation.Data.SqlClient.SafeSqlConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SafeSqlConnectionFactory.Thread">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SafeSqlConnectionFactory.CreateConnection(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="userName"></param>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SafeSqlConnectionFactory.CreateConnectionHelper(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SimpleLoggedSqlCommandFilterRule">
            <summary>
            Summary description for LoggedSqlCommandFilterRule.
            </summary>
        </member>
        <member name="T:Foundation.Data.SqlClient.SimpleSqlConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SimpleSqlConnectionFactory.#ctor(Foundation.Configuration.ConfigurationSection,System.String)">
            <summary>
            
            </summary>
            <param name="section"></param>
            <param name="nodeName"></param>
        </member>
        <member name="P:Foundation.Data.SqlClient.SimpleSqlConnectionFactory.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SimpleSqlConnectionFactory.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SimpleSqlConnectionFactory.CreateConnection(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlCommandBuilderHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SqlCommandBuilderHelper.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlCommandBuilderHelper.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlCommandExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlCommandExtensions.ToLogString(System.Data.SqlClient.SqlCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlCommandHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlCommandHelper.ExecuteXmlDocument(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlDatabase">
            <summary>
            Static helper methods for SQL Server connections.
            </summary>
        </member>
        <member name="F:Foundation.Data.SqlClient.SqlDatabase.SqlDateTimeZero">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlDatabase.CreateStoreProcedureCommand(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            Creates the store procedure command.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlDatabase.GetSysComments(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="database"></param>
            <param name="schema"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlErrorCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlErrorCollectionExtensions.ToLogString(System.Data.SqlClient.SqlErrorCollection)">
            <summary>
            
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlErrorExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlErrorExtensions.ToLogString(System.Data.SqlClient.SqlError)">
            <summary>
            
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlLog.SqlLog">
            <summary>
            Logs SQL activity of an application into a database.
            </summary>
            <remarks>
            Currently only <see cref="T:System.Data.SqlClient.SqlConnection"/> activity can be logged.
            See <see cref="N:Foundation.Data.SqlClient.SqlLoggedSqlConnection"/>.
            <list type="table">
                   <listheader>
                       <term>Event</term>
                       <description>SqlLog method</description>
                   </listheader>
                   <item>
                       <term>After the application started.</term>
                       <description><see cref="M:Foundation.Data.SqlClient.SqlLog.SqlLog.ApplicationStart(System.String,System.DateTime,System.Boolean)"/></description>
                   </item>
                   <item>
                       <term>Before the application ends.</term>
                       <description><see cref="M:Foundation.Data.SqlClient.SqlLog.SqlLog.ApplicationEnd(System.Int32,System.DateTime)"/></description>
                   </item>
                   <item>
                       <term>After <see cref="M:System.Data.IDbConnection.Open">IDbConnection.Open</see>.</term>
                       <description><see cref="M:Foundation.Data.SqlClient.SqlLog.SqlLog.ConnectionOpen(System.Int32,System.Data.IDbConnection,System.String,System.String,System.DateTime,System.Int64,System.Exception)"/></description>
                   </item>
                   <item>
                       <term>Instead of <see cref="M:System.Data.IDbConnection.Close">IDbConnection.Close</see>.</term>
                       <description><see cref="M:Foundation.Data.SqlClient.SqlLog.SqlLog.CloseConnection(System.Data.IDbConnection)"/></description>
                   </item>
                   <item>
                       <term>Instead of <see cref="M:System.IDisposable.Dispose">IDisposable.Dispose</see>.</term>
                       <description><see cref="M:Foundation.Data.SqlClient.SqlLog.SqlLog.DisposeConnection(System.Data.IDbConnection)"/></description>
                   </item>
                   <item>
                       <term>After executing an <see cref="T:System.Data.IDbCommand"/>.</term>
                       <description><see cref="M:Foundation.Data.SqlClient.SqlLog.SqlLog.CommandExecute(System.Int32,System.Int32,System.Data.IDbCommand,System.DateTime,System.Int64,System.Exception)"/></description>
                   </item>
                   <item>
                       <term></term>
                       <description></description>
                   </item>
                   <item>
                       <term></term>
                       <description></description>
                   </item>
            </list>
            The diagram of SQL Server database tables:
            <img src="LogDatabase.png"/>
            </remarks>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLog.SqlLog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Foundation.Data.SqlClient.SqlLog.SqlLog"/> class.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="P:Foundation.Data.SqlClient.SqlLog.SqlLog.Thread">
            <summary>
            Gets the logger thread.
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLog.SqlLog.ApplicationStart(System.String,System.DateTime,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="startDate"></param>
            <param name="safe"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLog.SqlLog.ApplicationEnd(System.Int32,System.DateTime)">
            <summary>
            Executes the <c>LogApplicationEnd</c> stored procedure in the SQL Server database.
            </summary>
            <param name="applicationId">The identifier of the application. See <see cref="M:Foundation.Data.SqlClient.SqlLog.SqlLog.ApplicationStart(System.String,System.DateTime,System.Boolean)"/>.</param>
            <param name="endDate">The end date of the application.</param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLog.SqlLog.ConnectionOpen(System.Int32,System.Data.IDbConnection,System.String,System.String,System.DateTime,System.Int64,System.Exception)">
            <summary>
            Logs an <see cref="M:System.Data.IDbConnection.Open"/> method call.
            </summary>
            <param name="applicationId">The identifier of the application.</param>
            <param name="connection"></param>
            <param name="userName">The name of the user.</param>
            <param name="hostName">The name of the host.</param>
            <param name="startDate">The start date of the connection.</param>
            <param name="duration">The duration of the <see cref="M:System.Data.IDbConnection.Open"/> method in milliseconds.</param>
            <param name="exception">The exception caught after <see cref="M:System.Data.IDbConnection.Open"/>. Can be <c>null</c>.</param>
            <returns>The identifier of the connection.</returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLog.SqlLog.CloseConnection(System.Data.IDbConnection)">
            <summary>
            Calls <see cref="M:System.Data.IDbConnection.Close">IDbConnection.Close</see>.
            Logs the event if the connection is removed from the pool.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLog.SqlLog.DisposeConnection(System.Data.IDbConnection)">
            <summary>
            Calls connection's <see cref="M:System.IDisposable.Dispose"/> method.
            Logs the close event if the connection is removed from the pool.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLog.SqlLog.CommandExecute(System.Int32,System.Int32,System.Data.IDbCommand,System.DateTime,System.Int64,System.Exception)">
            <summary>
            Logs the command execution event to the database.
            </summary>
            <param name="applicationId">The identifier of the application.</param>
            <param name="connectionNo">The identifier of the connection.</param>
            <param name="command"></param>
            <param name="startDate">The start date of the command execution.</param>
            <param name="duration">The duration of the command execution in ticks (see Stopwatch).</param>
            <param name="exception">The exception during command execution. Can be <c>null</c>.</param>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlLoggedSqlConnection.ISqlLoggedSqlCommandFilter">
            <summary>
            SQL logging can be filtered.
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLoggedSqlConnection.ISqlLoggedSqlCommandFilter.Contains(System.String,System.String,System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <param name="hostName"></param>
            <param name="command"></param>
            <returns>True if the command must be logged. False otherwise.</returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection">
            <summary>
            Logged SqlConnection class.
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.#ctor(Foundation.Data.SqlClient.SqlLog.SqlLog,System.Int32,System.String,System.String,System.String,Foundation.Data.SqlClient.SqlLoggedSqlConnection.ISqlLoggedSqlCommandFilter)">
            <summary>
            
            </summary>
            <param name="sqlLog"></param>
            <param name="applicationId"></param>
            <param name="userName"></param>
            <param name="hostName"></param>
            <param name="connectionString"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.Open">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.ConnectionTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.Filter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnection.HostName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlLoggedSqlConnection.SqlLoggedSqlConnectionFactory.#ctor(System.String,System.String,Foundation.Data.SqlClient.SqlLoggedSqlConnection.ISqlLoggedSqlCommandFilter)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="applicationName"></param>
            <param name="filter"></param>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlParameterCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlParameterCollectionExtensions.AddStructured(System.Data.SqlClient.SqlParameterCollection,System.String,System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord})">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterName"></param>
            <param name="sqlDataRecords"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlParameterCollectionExtensions.ToLogString(System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlParameterCollectionExtensions.Add(System.Collections.Generic.ICollection{System.Data.SqlClient.SqlParameter},System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlParameterCollectionExtensions.Add(System.Collections.Generic.ICollection{System.Data.SqlClient.SqlParameter},System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterName"></param>
            <param name="sqlDbType"></param>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlParameterCollectionExtensions.ToObjectList(System.Collections.Generic.ICollection{System.Data.SqlClient.SqlParameter})">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlParameterExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlParameterExtensions.GetDataTypeName(System.Data.SqlClient.SqlParameter)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlSequence">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlSequence.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlSequence.CreateSchema(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlSequence.GetNextSequenceValue(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlStatementBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementBuilder.ToString(System.Nullable{System.Byte})">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementBuilder.ToString(System.DBNull)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementBuilder.ToString(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementBuilder.ToString(System.Object,System.Data.SqlDbType)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementBuilder.AppendToCommandText(System.Text.StringBuilder,System.String)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementBuilder.AppendToCommandText(System.Text.StringBuilder,System.Object,System.Data.SqlDbType)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="value"></param>
            <param name="sqlDbType"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementBuilder.AppendToCommandText(System.Text.StringBuilder,System.Data.SqlTypes.SqlBoolean)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="sqlBoolean"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementBuilder.AppendToCommandText(System.Text.StringBuilder,System.Data.SqlTypes.SqlInt16)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementBuilder.AppendToCommandText(System.Text.StringBuilder,System.Data.SqlTypes.SqlDateTime)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="sqlDateTime"></param>
        </member>
        <member name="T:Foundation.Data.SqlClient.SqlStatementExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.SqlClient.SqlStatementExtensions.True">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.SqlClient.SqlStatementExtensions.False">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementExtensions.ToTSqlBit(System.Boolean)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementExtensions.ToTSqlDateTime(System.DateTime)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementExtensions.ToTSqlDecimal(System.Decimal)">
            <summary>
            Converts a <see cref="T:System.Decimal"/> value to Microsoft SQL Server decimal string.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementExtensions.ToTSqlInt(System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementExtensions.ToTSqlVarChar(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementExtensions.ToTSqlNVarChar(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementExtensions.ToSqlDateTime(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SqlClient.SqlStatementExtensions.ToSqlInt32(System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Foundation.Data.ExecuteReaderResponse`2.Objects1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.ExecuteReaderResponse`2.Objects2">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.CommandDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.CommandDefinition.CommandText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.CommandDefinition.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.CommandDefinition.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.CommandDefinition.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.ConnectionStateManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.Database">
            <summary>
            Helper base class for ADO.NET.
            </summary>
        </member>
        <member name="M:Foundation.Data.Database.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.Database.#ctor(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="P:Foundation.Data.Database.Connection">
            <summary>
            Retrieves the underlying <see cref="T:System.Data.IDbConnection"/>.
            </summary>
        </member>
        <member name="P:Foundation.Data.Database.ProviderFactoryHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.Database.CommandHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.Database.CommandBuilderHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.Database.State">
            <summary>
            Gets the underlying <see cref="P:System.Data.IDbConnection.State"/>.
            </summary>
        </member>
        <member name="P:Foundation.Data.Database.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="P:Foundation.Data.Database.CommandTimeout">
            <summary>
            Gets or sets the command timeout.
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:Foundation.Data.Database.RowCount">
            <summary>
            Gets the last executed command's rowcount.
            </summary>
            <remarks>
            <list type="table">
            <item>
                   <term>ExecuteNonQuery</term>
                   <description>number of affected rows. See <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/></description>
            </item>
            <item>
                   <term>Fill</term>
                   <description>number of rows read. See <see cref="T:System.Data.SqlClient.SqlDataAdapter"/>'s Fill method</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Foundation.Data.Database.Command">
            <summary>
            Gets the last executed <see cref="T:System.Data.IDbCommand"/>.
            </summary>
        </member>
        <member name="P:Foundation.Data.Database.ReturnValue">
            <summary>
            Gets the return value (int) of the last executed <see cref="T:System.Data.IDbCommand"/>.
            </summary>
            <remarks>
            The last executed command must be an SQL Server stored procedure.
            Gets the last executed command's 0th parameter's value as <see cref="T:System.Int32"/>
            </remarks>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteDataTable(System.Data.Common.DbProviderFactory,System.Data.Common.DbConnection,System.String)">
            <summary>
            
            </summary>
            <param name="factory"></param>
            <param name="connection"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.Write(System.Data.DataTable,System.IO.TextWriter)">
            <summary>
            writes into CSV file
            </summary>
            <param name="dataTable"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:Foundation.Data.Database.Write(System.Data.DataView,System.Char,System.String,System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="dataView"></param>
            <param name="columnSeparator"></param>
            <param name="lineSeparator"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:Foundation.Data.Database.ToString(System.Data.DataView,System.Char,System.String)">
            <summary>
            
            </summary>
            <param name="dataView"></param>
            <param name="columnSeparator"></param>
            <param name="lineSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.Write(System.Data.DataTable,System.Data.DataRow[],System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="dataRows"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:Foundation.Data.Database.GetValue``1(System.Object,``0)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="value"></param>
            <param name="outputNullValue"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.GetValueOrDefault``1(System.Object)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.ToString(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="columnNumber"></param>
            <param name="rowNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.Open">
            <summary>
            Opens the underlying <see cref="T:System.Data.IDbConnection"/>
            </summary>
        </member>
        <member name="M:Foundation.Data.Database.Close">
            <summary>
            Closes the underlying <see cref="T:System.Data.IDbConnection"/>.
            </summary>
        </member>
        <member name="M:Foundation.Data.Database.Dispose">
            <summary>
            Disposes the underlying <see cref="T:System.Data.IDbConnection"/>
            </summary>
        </member>
        <member name="M:Foundation.Data.Database.BeginTransaction">
            <summary>
             Begins a database transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified System.Data.IsolationLevel value.
            </summary>
            <param name="il"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.CreateCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.IDbCommand"/> objects associated with the connection. 
            </summary>
            <remarks>
            Sets the CommandTimeout property.
            </remarks>
            <returns>
            A <see cref="T:System.Data.IDbCommand"/> object associated with the connection.
            </returns>
        </member>
        <member name="M:Foundation.Data.Database.CreateCommand(System.String)">
            <summary>
            Creates and returns a Command object associated with the connection.
            </summary>
            <param name="commandText"></param>
            <returns>A <see cref="T:System.Data.IDbCommand"/> object associated with the connection.</returns>
        </member>
        <member name="M:Foundation.Data.Database.CreateCommand(System.String,System.Data.CommandType)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns>A Command object associated with the connection.</returns>
        </member>
        <member name="M:Foundation.Data.Database.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes an SQL statement against the Connection object of a .NET Framework data provider, and returns the number of rows affected.
            </summary>
            <param name="command"></param>
            <returns>
            The number of rows affected.
            </returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteNonQuery(System.String)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <returns>
            The number of rows affected.
            </returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteScalar(System.String)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteReader(System.String)">
            <summary>
            Executes the commandText against the <see cref="P:Foundation.Data.Database.Connection"/> and builds an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteReader(System.String,System.Data.CommandBehavior)">
            <summary>
            Executes the commandText against the Connection, and builds an <see cref="T:System.Data.IDataReader"/> using one of the <see cref="T:System.Data.CommandBehavior"/> values.
            </summary>
            <param name="commandText">The text command to execute.</param>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"/> values.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteDataTable(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteDataTable(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteDataSet(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteDataSet(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteXmlDocument(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.ExecuteXmlDocument(System.String)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.FillSchema(System.Data.IDbCommand,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.FillSchema(System.Data.IDbCommand,System.Data.DataSet,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="dataSet"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.Fill(System.String,System.Data.DataSet,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.Database.Initialize(System.Data.IDbConnection,System.Data.IDbTransaction,Foundation.Data.IDbCommandHelper,System.Int32)">
            <summary>
            Inherited class must call this method first.
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandHelper"></param>
            <param name="commandTimeout"></param>
        </member>
        <member name="P:Foundation.Data.DbColumn.AllowDbNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.BaseColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.BaseSchemaName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.BaseTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.ColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.ColumnOrdinal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.ColumnSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.DataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.IsAliased">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.IsExpression">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.IsKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.IsIdentity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.IsLong">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.IsUnique">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.NonVersionedProviderType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.NumericPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.NumericScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DbColumn.ProviderType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.DataParameterValue`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Data.DataParameterValue`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Data.DataParameterValue`1.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DataParameterValue`1.Null">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DataParameterValue`1.Void">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataParameterValue`1.op_Implicit(`0)~Foundation.Data.DataParameterValue{`0}">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataParameterValue`1.op_Explicit(Foundation.Data.DataParameterValue{`0})~`0">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.DataParameterValue`1.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.DataParameterValue`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.DataParameterValueType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.DataParameterValueType.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.DataParameterValueType.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.DataParameterValueType.Value">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.DataParameterValueType.Void">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.DataParameterValueTypeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataParameterValueTypeExtensions.IsValueOrNull(Foundation.Data.DataParameterValueType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.DataReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataReader.Read``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataReader.Read(System.Action{System.Data.IDataRecord})">
            <summary>
            
            </summary>
            <param name="read"></param>
        </member>
        <member name="M:Foundation.Data.DataReader.Read(System.Func{System.Data.IDataRecord,System.Boolean})">
            <summary>
            
            </summary>
            <param name="read"></param>
        </member>
        <member name="M:Foundation.Data.DataReader.NextResult">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.DataRowExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataRowExtensions.GetValue``1(System.Data.DataRow,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataRowExtensions.GetValue``1(System.Data.DataRow,System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="name"></param>
            <param name="outputNullValue"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataRowExtensions.GetValueOrDefault``1(System.Data.DataRow,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataRowExtensions.GetValueOrDefault``1(System.Data.DataRow,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataRowExtensions.ToStringTable(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="dataRow"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.DataSetExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataSetExtensions.SetDataTableNames(System.Data.DataSet,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="dataTableNames"></param>
        </member>
        <member name="T:Foundation.Data.DataTableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataTableExtensions.ToStringTableString(System.Data.DataTable)">
            <summary>
            Retrieves the string representation of a DataTable (like SQL Query Analyzer).
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.DataViewExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataViewExtensions.ToStringTableString(System.Data.DataView)">
            <summary>
            
            </summary>
            <param name="dataView"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.DbCommandExecutionException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DbCommandExecutionException.#ctor(System.String,System.Exception,System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="command"></param>
        </member>
        <member name="M:Foundation.Data.DbCommandExecutionException.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.DbProviderFactoryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DbProviderFactoryExtensions.ExecuteDataTable(System.Data.Common.DbProviderFactory,System.Data.Common.DbConnection,System.String)">
            <summary>
            
            </summary>
            <param name="factory"></param>
            <param name="connection"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbProviderFactoryExtensions.ExecuteReader``1(System.Data.Common.DbProviderFactory,System.String,Foundation.Data.CommandDefinition,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbProviderFactory"></param>
            <param name="connectionString"></param>
            <param name="commandDefinition"></param>
            <param name="commandBehavior"></param>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.DbTransactionScope">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DbTransactionScope.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
        </member>
        <member name="T:Foundation.Data.DataParameterCollectionExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Foundation.Data.DataParameterCollectionExtensions.AddRange(System.Data.IDataParameterCollection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="dataParameterCollection"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Foundation.Data.DataParameterCollectionExtensions.ToObjectList(System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataParameterCollectionExtensions.ToLogString(System.Data.IDataParameterCollection)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.DataParameterExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataParameterExtensions.GetValueOrDefault``1(System.Data.IDataParameter)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataParameterExtensions.SetValue``1(System.Data.IDataParameter,Foundation.Data.DataParameterValue{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter"></param>
            <param name="value"></param>
        </member>
        <member name="T:Foundation.Data.IDataParameterValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.IDataParameterValue.ValueObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.IDataParameterValue`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Foundation.Data.IDataParameterValue`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.DataReaderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataReaderExtensions.AsEnumerable(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataReaderExtensions.Fill(System.Data.IDataReader,System.Data.DataSet,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
            <param name="dataSet"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataReaderExtensions.Fill(System.Data.IDataReader,System.Data.DataTable,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
            <param name="dataTable"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.DataRecordExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DataRecordExtensions.GetNullableBoolean(System.Data.IDataRecord,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataRecord"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataRecordExtensions.GetNullableDateTime(System.Data.IDataRecord,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataRecord"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataRecordExtensions.GetNullableDecimal(System.Data.IDataRecord,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataRecord"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataRecordExtensions.GetNullableInt16(System.Data.IDataRecord,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataRecord"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataRecordExtensions.GetNullableInt32(System.Data.IDataRecord,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataRecord"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DataRecordExtensions.GetStringOrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataRecord"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.IDbCommandBuilderHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.IDbCommandBuilderHelper.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:Foundation.Data.DbCommandExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DbCommandExtensions.AddParameterIfNotNull(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.DbCommandExtensions.ExecuteDataSet(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbCommandExtensions.ExecuteDataTable(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbCommandExtensions.ExecuteScalarValue``1(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbCommandExtensions.ExecuteScalarValueOrDefault``1(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbCommandExtensions.Fill(System.Data.IDbCommand,System.Data.DataSet,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="dataSet"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbCommandExtensions.Fill(System.Data.IDbCommand,System.Data.DataTable,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="dataTable"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbCommandExtensions.ToLogString(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.IDbCommandHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.IDbCommandHelper.ExecuteXmlDocument(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.IDbConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.IDbConnectionFactory.Thread">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.IDbConnectionFactory.CreateConnection(System.String,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.IDbConnectionFactory.CreateConnectionHelper(System.Data.IDbConnection)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.IDbConnectionHelper">
            <summary>
            
            </summary>
        </member>
        <member name="E:Foundation.Data.IDbConnectionHelper.InfoMessage">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.IDbProviderFactoryHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.IDbProviderFactoryHelper.DbCommandHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.IDbProviderFactoryHelper.DbCommandBuilderHelper">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.IDbTransactionScope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.IDbTransactionScope.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.IDbTransactionScope.Transaction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.DbTransactionScopeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.CreateCommand(Foundation.Data.IDbTransactionScope)">
            <summary>
            
            </summary>
            <param name="transactionScope"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.CreateCommand(Foundation.Data.IDbTransactionScope,Foundation.Data.CommandDefinition)">
            <summary>
            
            </summary>
            <param name="transactionScope"></param>
            <param name="commandDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.ExecuteReader``1(Foundation.Data.IDbTransactionScope,Foundation.Data.CommandDefinition,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="transactionScope"></param>
            <param name="commandDefinition"></param>
            <param name="commandBehavior"></param>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.ExecuteReader(Foundation.Data.IDbTransactionScope,Foundation.Data.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            
            </summary>
            <param name="transactionScope"></param>
            <param name="commandDefinition"></param>
            <param name="commandBehavior"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.ExecuteReader(Foundation.Data.IDbTransactionScope,Foundation.Data.CommandDefinition,System.Data.CommandBehavior,System.Action{System.Data.IDataRecord})">
            <summary>
            
            </summary>
            <param name="transactionScope"></param>
            <param name="commandDefinition"></param>
            <param name="commandBehavior"></param>
            <param name="read"></param>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.ExecuteDataSet(Foundation.Data.IDbTransactionScope,Foundation.Data.CommandDefinition,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="transactionScope"></param>
            <param name="commandDefinition"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.ExecuteDataTable(Foundation.Data.IDbTransactionScope,Foundation.Data.CommandDefinition,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="transactionScope"></param>
            <param name="commandDefinition"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.ExecuteNonQuery(Foundation.Data.IDbTransactionScope,Foundation.Data.CommandDefinition)">
            <summary>
            
            </summary>
            <param name="transactionScope"></param>
            <param name="commandDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.ExecuteScalar(Foundation.Data.IDbTransactionScope,Foundation.Data.CommandDefinition)">
            <summary>
            
            </summary>
            <param name="transactionScope"></param>
            <param name="commandDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.DbTransactionScopeExtensions.ExecuteScalar``1(Foundation.Data.IDbTransactionScope,Foundation.Data.CommandDefinition)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="transactionScope"></param>
            <param name="commandDefinition"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.ISafeDbConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.ISafeDbConnection.CancellationToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.ISafeDbConnection.Id">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.ISafeDbConnection.HandleException(System.Exception,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="elapsed"></param>
        </member>
        <member name="M:Foundation.Data.ISafeDbConnection.HandleException(System.Exception,System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="command"></param>
        </member>
        <member name="T:Foundation.Data.ITransactionScope">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.ITransactionScope.Complete">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.AfterExecuteCommandEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.LoggedDbConnection.AfterExecuteCommandEventArgs.#ctor(Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo,System.Exception)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.AfterExecuteCommandEventArgs.Command">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.AfterExecuteCommandEventArgs.Exception">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.AfterOpenDbConnectionEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.LoggedDbConnection.AfterOpenDbConnectionEventArgs.#ctor(System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.AfterOpenDbConnectionEventArgs.Exception">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.AfterReadEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.LoggedDbConnection.AfterReadEventArgs.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="rowCount"></param>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.AfterReadEventArgs.RowCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.BeforeExecuteCommandEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.LoggedDbConnection.BeforeExecuteCommandEventArgs.#ctor(Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo)">
            <summary>
            
            </summary>
            <param name="command"></param>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.BeforeExecuteCommandEventArgs.Command">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.BeforeOpenDbConnectionEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.LoggedDbConnection.BeforeOpenDbConnectionEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.BeforeOpenDbConnectionEventArgs.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.LoggedDbCommandExecutionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.LoggedDbConnection.LoggedDbCommandExecutionType.NonQuery">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.LoggedDbConnection.LoggedDbCommandExecutionType.Reader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.LoggedDbConnection.LoggedDbCommandExecutionType.Scalar">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo.#ctor(System.Int32,System.Data.ConnectionState,System.String,Foundation.Data.LoggedDbConnection.LoggedDbCommandExecutionType,System.Data.CommandType,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="commandId"></param>
            <param name="connectionState"></param>
            <param name="database"></param>
            <param name="executionType"></param>
            <param name="commandType"></param>
            <param name="commandTimeout"></param>
            <param name="commandText"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo.CommandId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo.ConnectionState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo.ExecutionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo.CommandText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedDbCommandInfo.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.LoggedDbConnection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.LoggedDbConnection.LoggedDbConnection.#ctor(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="E:Foundation.Data.LoggedDbConnection.LoggedDbConnection.BeforeOpen">
            <summary>
            
            </summary>
        </member>
        <member name="E:Foundation.Data.LoggedDbConnection.LoggedDbConnection.AfterOpen">
            <summary>
            
            </summary>
        </member>
        <member name="E:Foundation.Data.LoggedDbConnection.LoggedDbConnection.BeforeExecuteReader">
            <summary>
            
            </summary>
        </member>
        <member name="E:Foundation.Data.LoggedDbConnection.LoggedDbConnection.AfterExecuteReader">
            <summary>
            
            </summary>
        </member>
        <member name="E:Foundation.Data.LoggedDbConnection.LoggedDbConnection.AfterRead">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.LoggedDbConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.LoggedDbConnection.LoggedDbConnectionFactory.ToLoggedDbConnection(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.LoggedDbConnection.LoggedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.LoggedDbConnection.LoggedEventArgs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedEventArgs.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.LoggedDbConnection.LoggedEventArgs.DateTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.GetValues">
            <summary>
            
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.MappedDataReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.#ctor(System.Data.IDataReader,Foundation.Data.GetValues)">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
            <param name="getValues"></param>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.MappedDataReader.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.MappedDataReader.FieldCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetBoolean(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetByte(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <param name="dataOffset"></param>
            <param name="buffer"></param>
            <param name="bufferOffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetChar(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <param name="dataOffset"></param>
            <param name="buffer"></param>
            <param name="bufferOffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetDataTypeName(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetDateTime(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetDecimal(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetFieldType(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetFloat(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetGuid(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetInt16(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetInt32(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetInt64(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetName(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetOrdinal(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetSchemaTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetString(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.GetValues(System.Object[])">
            <summary>
            
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.MappedDataReader.HasRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.MappedDataReader.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.IsDBNull(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.NextResult">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.MappedDataReader.Read">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.MappedDataReader.RecordsAffected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.MappedDataReader.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.MappedDataReader.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PBinary.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PBinary.op_Implicit(System.Byte[])~Foundation.Data.PTypes.PBinary">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBinary.op_Implicit(Foundation.Data.PTypes.PBinary)~System.Byte[]">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBinary.op_Equality(Foundation.Data.PTypes.PBinary,Foundation.Data.PTypes.PBinary)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBinary.op_Inequality(Foundation.Data.PTypes.PBinary,Foundation.Data.PTypes.PBinary)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBinary.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBinary.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PBinary.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBinary.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBinary.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBinary.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBinary.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PBinary.ToString">
            <summary>
            Initializes a new instance of the
            <a href="frlrfsystemdatasqltypessqlbooleanclasstopic.htm">SqlBoolean</a> structure
            using the supplied boolean value.
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PBinary.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PBinary.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PBinary.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.PTypes.PBoolean">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PBoolean.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PBoolean.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PBoolean.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PBoolean.True">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PBoolean.False">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Foundation.Data.PTypes.PBoolean"/>
            structure using the supplied boolean value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.#ctor(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Foundation.Data.PTypes.PBoolean"/> structure using the supplied
            <see cref="T:System.Data.SqlTypes.SqlBoolean"/> value.
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.op_Implicit(System.Boolean)~Foundation.Data.PTypes.PBoolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.op_Implicit(System.Nullable{System.Boolean})~Foundation.Data.PTypes.PBoolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.op_Implicit(System.Data.SqlTypes.SqlBoolean)~Foundation.Data.PTypes.PBoolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.op_Implicit(Foundation.Data.PTypes.PBoolean)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.op_Equality(Foundation.Data.PTypes.PBoolean,Foundation.Data.PTypes.PBoolean)">
            <summary>
            Compares two instances of <see cref="T:Foundation.Data.PTypes.PBoolean"/> for equality.
            </summary>
            <param name="x">An <see cref="T:Foundation.Data.PTypes.PBoolean"/></param>
            <param name="y">An <see cref="T:Foundation.Data.PTypes.PBoolean"/></param>
            <returns>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the two instances's <see cref="P:Foundation.Data.PTypes.PBoolean.ValueType"/> are equal
            and values are equal.
            </returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.op_Inequality(Foundation.Data.PTypes.PBoolean,Foundation.Data.PTypes.PBoolean)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            Converts the specified <see cref="T:System.String"/> representation of a logical value
            to its <see cref="T:Foundation.Data.PTypes.PBoolean"/> equivalent.
            </summary>
            <param name="s">
            The <see cref="T:System.String"/> to be converted. 
            </param>
            <param name="type"></param>
            <returns>
            An <see cref="T:Foundation.Data.PTypes.PBoolean"/> structure containing the parsed value.
            </returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PBoolean.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBoolean.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBoolean.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBoolean.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBoolean.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBoolean.IsTrue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PBoolean.IsFalse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PBoolean.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PByte">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.#ctor(System.Byte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.#ctor(System.Data.SqlTypes.SqlByte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.op_Implicit(System.Byte)~Foundation.Data.PTypes.PByte">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.op_Implicit(System.Nullable{System.Byte})~Foundation.Data.PTypes.PByte">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.op_Implicit(System.Data.SqlTypes.SqlByte)~Foundation.Data.PTypes.PByte">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.op_Implicit(Foundation.Data.PTypes.PByte)~System.Byte">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.op_Equality(Foundation.Data.PTypes.PByte,Foundation.Data.PTypes.PByte)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.op_Inequality(Foundation.Data.PTypes.PByte,Foundation.Data.PTypes.PByte)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PByte.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PByte.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PByte.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PByte.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PByte.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PByte.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Foundation.Data.PTypes.PByte.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PByte.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PByte.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.PTypes.PConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.FromSqlBoolean(System.Object)">
            <summary>
            
            </summary>
            <param name="sqlBoolean"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.FromSqlDateTime(System.Object)">
            <summary>
            
            </summary>
            <param name="sqlDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.FromSqlDecimal(System.Object)">
            <summary>
            
            </summary>
            <param name="sqlDecimal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.FromSqlDouble(System.Object)">
            <summary>
            
            </summary>
            <param name="sqlDouble"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.FromSqlInt16(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.FromSqlInt32(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.FromSqlMoney(System.Object)">
            <summary>
            
            </summary>
            <param name="sqlMoney"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.FromSqlString(System.Object)">
            <summary>
            
            </summary>
            <param name="sqlString"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.ScalarToPBoolean(System.Object)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.ScalarToPDateTime(System.Object)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.ScalarToPDecimal(System.Object)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.ScalarToPDouble(System.Object)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.ScalarToPInt16(System.Object)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.ScalarToPInt32(System.Object)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.ScalarToPMoney(System.Object)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.ScalarToPString(System.Object)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PConvert.ScalarToPXml(System.Object)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PDateTime.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PDateTime.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PDateTime.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.#ctor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.#ctor(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.#ctor(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.op_Implicit(System.DateTime)~Foundation.Data.PTypes.PDateTime">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.op_Implicit(System.Nullable{System.DateTime})~Foundation.Data.PTypes.PDateTime">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.op_Implicit(System.Data.SqlTypes.SqlDateTime)~Foundation.Data.PTypes.PDateTime">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.op_Implicit(Foundation.Data.PTypes.PDateTime)~System.DateTime">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.op_Equality(Foundation.Data.PTypes.PDateTime,Foundation.Data.PTypes.PDateTime)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.op_Inequality(Foundation.Data.PTypes.PDateTime,Foundation.Data.PTypes.PDateTime)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PDateTime.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDateTime.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDateTime.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDateTime.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDateTime.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PDateTime.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.#ctor(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.#ctor(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.op_Implicit(System.Decimal)~Foundation.Data.PTypes.PDecimal">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.op_Implicit(System.Data.SqlTypes.SqlDecimal)~Foundation.Data.PTypes.PDecimal">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.op_Implicit(Foundation.Data.PTypes.PDecimal)~System.Decimal">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.op_Equality(Foundation.Data.PTypes.PDecimal,Foundation.Data.PTypes.PDecimal)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.op_Inequality(Foundation.Data.PTypes.PDecimal,Foundation.Data.PTypes.PDecimal)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PDecimal.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDecimal.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDecimal.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDecimal.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDecimal.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PDecimal.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Foundation.Data.PTypes.PDecimal.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PDecimal.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PDecimal.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.PTypes.PDouble">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PDouble.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PDouble.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PDouble.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.#ctor(System.Data.SqlTypes.SqlDouble)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.op_Implicit(System.Double)~Foundation.Data.PTypes.PDouble">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.op_Implicit(System.Data.SqlTypes.SqlDouble)~Foundation.Data.PTypes.PDouble">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.op_Implicit(Foundation.Data.PTypes.PDouble)~System.Double">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.op_Equality(Foundation.Data.PTypes.PDouble,Foundation.Data.PTypes.PDouble)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.op_Inequality(Foundation.Data.PTypes.PDouble,Foundation.Data.PTypes.PDouble)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PDouble.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDouble.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDouble.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDouble.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PDouble.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PDouble.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PGuid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PGuid.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PGuid.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PGuid.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.#ctor(System.Guid)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.#ctor(System.Data.SqlTypes.SqlGuid)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.op_Implicit(System.Guid)~Foundation.Data.PTypes.PGuid">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.op_Implicit(System.Data.SqlTypes.SqlGuid)~Foundation.Data.PTypes.PGuid">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.op_Implicit(Foundation.Data.PTypes.PGuid)~System.Guid">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.op_Equality(Foundation.Data.PTypes.PGuid,Foundation.Data.PTypes.PGuid)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.op_Inequality(Foundation.Data.PTypes.PGuid,Foundation.Data.PTypes.PGuid)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PGuid.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PGuid.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PGuid.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PGuid.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PGuid.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PGuid.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PInt16">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.#ctor(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.#ctor(System.Data.SqlTypes.SqlInt16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.op_Implicit(System.Int16)~Foundation.Data.PTypes.PInt16">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.op_Implicit(System.Data.SqlTypes.SqlInt16)~Foundation.Data.PTypes.PInt16">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.op_Implicit(Foundation.Data.PTypes.PInt16)~System.Int16">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.op_Equality(Foundation.Data.PTypes.PInt16,Foundation.Data.PTypes.PInt16)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.op_Inequality(Foundation.Data.PTypes.PInt16,Foundation.Data.PTypes.PInt16)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt16.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt16.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt16.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt16.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt16.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt16.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Foundation.Data.PTypes.PInt16.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PInt16.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PInt16.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.PTypes.PInt32">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PInt32.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PInt32.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PInt32.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.#ctor(System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.#ctor(System.Data.SqlTypes.SqlInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.op_Implicit(System.Int32)~Foundation.Data.PTypes.PInt32">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.op_Implicit(System.Nullable{System.Int32})~Foundation.Data.PTypes.PInt32">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.op_Implicit(System.Data.SqlTypes.SqlInt32)~Foundation.Data.PTypes.PInt32">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.op_Implicit(Foundation.Data.PTypes.PInt32)~System.Int32">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.op_Equality(Foundation.Data.PTypes.PInt32,Foundation.Data.PTypes.PInt32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.op_Inequality(Foundation.Data.PTypes.PInt32,Foundation.Data.PTypes.PInt32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt32.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt32.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt32.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt32.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt32.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt32.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PInt64">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PInt64.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PInt64.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PInt64.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.#ctor(System.Data.SqlTypes.SqlInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.op_Implicit(System.Int64)~Foundation.Data.PTypes.PInt64">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.op_Implicit(System.Nullable{System.Int64})~Foundation.Data.PTypes.PInt64">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.op_Implicit(System.Data.SqlTypes.SqlInt64)~Foundation.Data.PTypes.PInt64">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.op_Implicit(Foundation.Data.PTypes.PInt64)~System.Int64">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.op_Equality(Foundation.Data.PTypes.PInt64,Foundation.Data.PTypes.PInt64)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.op_Inequality(Foundation.Data.PTypes.PInt64,Foundation.Data.PTypes.PInt64)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt64.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt64.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt64.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt64.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PInt64.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PInt64.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PMoney">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PMoney.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PMoney.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PMoney.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.#ctor(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.#ctor(System.Data.SqlTypes.SqlMoney)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.op_Implicit(System.Decimal)~Foundation.Data.PTypes.PMoney">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.op_Implicit(System.Data.SqlTypes.SqlMoney)~Foundation.Data.PTypes.PMoney">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.op_Implicit(Foundation.Data.PTypes.PMoney)~System.Decimal">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.op_Equality(Foundation.Data.PTypes.PMoney,Foundation.Data.PTypes.PMoney)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.op_Inequality(Foundation.Data.PTypes.PMoney,Foundation.Data.PTypes.PMoney)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PMoney.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PMoney.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PMoney.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PMoney.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PMoney.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PMoney.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PSingle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PSingle.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PSingle.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PSingle.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.#ctor(System.Data.SqlTypes.SqlSingle)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.op_Implicit(System.Single)~Foundation.Data.PTypes.PSingle">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.op_Implicit(System.Data.SqlTypes.SqlSingle)~Foundation.Data.PTypes.PSingle">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.op_Implicit(Foundation.Data.PTypes.PSingle)~System.Single">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.op_Equality(Foundation.Data.PTypes.PSingle,Foundation.Data.PTypes.PSingle)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.op_Inequality(Foundation.Data.PTypes.PSingle,Foundation.Data.PTypes.PSingle)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PSingle.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PSingle.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PSingle.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PSingle.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PSingle.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PSingle.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PString.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PString.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PString.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.#ctor(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.#ctor(System.Data.SqlTypes.SqlString)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.op_Implicit(System.Char)~Foundation.Data.PTypes.PString">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.op_Implicit(System.String)~Foundation.Data.PTypes.PString">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.op_Implicit(System.Data.SqlTypes.SqlString)~Foundation.Data.PTypes.PString">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.op_Implicit(Foundation.Data.PTypes.PString)~System.String">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.op_Equality(Foundation.Data.PTypes.PString,Foundation.Data.PTypes.PString)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.op_Inequality(Foundation.Data.PTypes.PString,Foundation.Data.PTypes.PString)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.Parse(System.String,Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.PTypes.PString.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PString.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PString.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PString.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PString.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PString.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PValueType">
            <summary>
            A Microsoft SQL Server stored procedure parameter can be NULL, DEFAULT, too.
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PValueType.Default">
            <summary>
            
            </summary>        
        </member>
        <member name="F:Foundation.Data.PTypes.PValueType.Empty">
            <summary>
            
            </summary>        
        </member>
        <member name="F:Foundation.Data.PTypes.PValueType.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PValueType.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.PTypes.PVariant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PVariant.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PVariant.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PVariant.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PVariant.#ctor(Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PVariant.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Data.PTypes.PVariant.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PVariant.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PVariant.IsValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PVariant.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.PTypes.PVariant.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PVariant.op_Implicit(System.String)~Foundation.Data.PTypes.PVariant">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.PTypes.PVariant.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.PTypes.PXml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PXml.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PXml.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.PTypes.PXml.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PXml.#ctor(Foundation.Data.PTypes.PValueType)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Foundation.Data.PTypes.PXml.#ctor(System.Data.SqlTypes.SqlXml)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Data.PTypes.PXml.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.PTypes.PXml.op_Implicit(System.Data.SqlTypes.SqlXml)~Foundation.Data.PTypes.PXml">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.SafeDbCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SafeDbCommand.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SafeDbCommand.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SafeDbCommand.CreateParameter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SafeDbCommand.ExecuteNonQuery">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SafeDbCommand.ExecuteReader">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SafeDbCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SafeDbCommand.ExecuteScalar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SafeDbCommand.Prepare">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbCommand.CommandText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbCommand.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbCommand.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbCommand.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbCommand.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbCommand.Transaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbCommand.UpdatedRowSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbCommand.Command">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.SafeDbConnection">
            <summary>
            Safe IDbConnection wrapper for Windows Services.
            </summary>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbConnection.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.Initialize(System.Data.IDbConnection,Foundation.Data.ISafeDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="safeDbConnection"></param>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.BeginTransaction">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.ChangeDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.CreateCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.Open">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbConnection.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbConnection.ConnectionTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbConnection.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.SafeDbConnection.State">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.ExecuteReader(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.SafeDbConnection.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="F:Foundation.Data.ExecuteReaderResponse`3.Objects1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.ExecuteReaderResponse`3.Objects2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Data.ExecuteReaderResponse`3.Objects3">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.ITextDataConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.ITextDataConverter.FromString(System.String,Foundation.Data.TextData.TextDataColumn)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.ITextDataConverter.ToString(System.Object,Foundation.Data.TextData.TextDataColumn)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataColumn">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataColumn.#ctor(System.String,System.String,System.Int32,System.Type,System.Nullable{System.Byte},System.Nullable{System.Byte},System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="maxLength"></param>
            <param name="dataType"></param>
            <param name="numericPrecision"></param>
            <param name="numericScale"></param>
            <param name="formatProvider"></param>
            <param name="format"></param>
            <param name="caption"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumn.DataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumn.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumn.FormatProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumn.MaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumn.ColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumn.Caption">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumn.NumericPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumn.NumericScale">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataColumnCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataColumnCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumnCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataColumnCollection.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataColumnCollection.IndexOf(System.String)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumnCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataColumnCollection.Add(Foundation.Data.TextData.TextDataColumn)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataColumnCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataColumnCollection.IndexOf(Foundation.Data.TextData.TextDataColumn)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataColumnCollection.Insert(System.Int32,Foundation.Data.TextData.TextDataColumn)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataColumnCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Foundation.Data.TextData.IConverter`2">
            <summary>
            
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="M:Foundation.Data.TextData.IConverter`2.Convert(`0)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataCommand.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataCommand.CommandText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataCommand.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataCommand.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommand.ExecuteReader">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommand.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommand.CreateDbParameter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataCommand.DbConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataCommand.DbParameterCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataCommand.DbTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataCommand.DesignTimeVisible">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommand.ExecuteNonQuery">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommand.ExecuteScalar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommand.Prepare">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataCommand.UpdatedRowSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataCommandBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommandBuilder.GetInsertCommand(System.Collections.Generic.IList{Foundation.Data.TextData.TextDataColumn},System.Collections.Generic.IList{Foundation.Data.TextData.ITextDataConverter},System.Collections.Generic.IEnumerable{System.Object[]},Foundation.Data.TextData.IConverter{Foundation.Data.TextData.TextDataCommand,System.IO.TextWriter})">
            <summary>
            
            </summary>
            <param name="columns"></param>
            <param name="converters"></param>
            <param name="rows"></param>
            <param name="getTextWriter"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataCommandBuilder.GetSelectCommand(System.Collections.Generic.IList{Foundation.Data.TextData.TextDataColumn},System.Collections.Generic.IList{Foundation.Data.TextData.ITextDataConverter},Foundation.Data.TextData.IConverter{Foundation.Data.TextData.TextDataCommand,System.IO.TextReader})">
            <summary>
            
            </summary>
            <param name="columns"></param>
            <param name="converters"></param>
            <param name="getTextReader"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataConnection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataConnection.CreateCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataConnection.ChangeDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataConnection.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataConnection.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataConnection.CreateDbCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataConnection.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataConnection.Database">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataConnection.Open">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataConnection.ServerVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataConnection.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataFormatException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataFormatException.#ctor(Foundation.Data.TextData.TextDataColumn,Foundation.Data.TextData.ITextDataConverter,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="converter"></param>
            <param name="fieldValue"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataFormatException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataFormatException.Column">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataFormatException.Converter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataFormatException.Fieldvalue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameter.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameter.DbType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameter.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameter.IsNullable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameter.ParameterName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameter.ResetDbType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameter.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameter.SourceColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameter.SourceColumnNullMapping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameter.SourceVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameter.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataParameterCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.Add(Foundation.Data.TextData.TextDataParameter)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.AddRange(System.Array)">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.PureContains(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameterCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.GetParameter(System.String)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.GetParameter(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.IndexOf(System.String)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameterCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameterCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameterCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.RemoveAt(System.String)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataParameterCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.GetParameterValue``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataParameterCollection.TryGetValue(System.String,Foundation.Data.TextData.TextDataParameter@)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataReader.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataReader.FieldCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetBoolean(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetByte(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <param name="dataOffset"></param>
            <param name="buffer"></param>
            <param name="bufferOffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetChar(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <param name="dataOffset"></param>
            <param name="buffer"></param>
            <param name="bufferOffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetDataTypeName(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetDateTime(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetDecimal(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetFieldType(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetFloat(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetGuid(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetInt16(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetInt32(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetInt64(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetName(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetOrdinal(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetSchemaTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetString(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.GetValues(System.Object[])">
            <summary>
            
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataReader.HasRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataReader.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.IsDBNull(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.NextResult">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataReader.Read">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataReader.RecordsAffected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataReader.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataReader.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataRow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataRow.#ctor(Foundation.Data.TextData.TextDataColumnCollection,Foundation.Data.TextData.TextDataRow.Convert)">
            <summary>
            
            </summary>
            <param name="columns"></param>
            <param name="convert"></param>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataRow.Convert">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataRow.Item(System.String)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataRow.ItemArray">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataRow.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataRow.Item(Foundation.Data.TextData.TextDataColumn)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataSet.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataSet.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataSet.Tables">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataSetTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataSetTable.#ctor(System.String,System.Int32,Foundation.Data.TextData.TextDataTable)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="rowCount"></param>
            <param name="table"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataSetTable.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataSetTable.RowCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataSetTable.Table">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataSetTableCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataSetTableCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataSetTableCollection.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataSetTableCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataSetTableCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataSetTableCollection.Add(Foundation.Data.TextData.TextDataSetTable)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataSetTableCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataStreamReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataStreamReader.#ctor(System.IO.TextReader,System.Collections.Generic.IList{Foundation.Data.TextData.TextDataColumn},System.Collections.Generic.IList{Foundation.Data.TextData.ITextDataConverter})">
            <summary>
            
            </summary>
            <param name="textReader"></param>
            <param name="columns"></param>
            <param name="converters"></param>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataStreamReader.ReadRow">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Data.TextData.TextDataTable.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataTable.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Data.TextData.TextDataTable.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Data.TextData.TextDataTableList">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.Tasks.TaskSyncRunner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.Tasks.TaskSyncRunner.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            
            </summary>
            <param name="task"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Foundation.Threading.Tasks.CreateTaskResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Threading.Tasks.CreateTaskResponse.Task">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Threading.Tasks.CreateTaskResponse.TaskInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.Tasks.CreateTaskResponse`1">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Foundation.Threading.Tasks.CreateTaskResponse`1.Task">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Threading.Tasks.CreateTaskResponse`1.TaskInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.Tasks.TaskInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.ManagedThreadId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.IsThreadPoolThread">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.CreationTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.IsCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.CompletedTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.CompletedTimeSpan">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.IsAlive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskInfo.Task">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.Tasks.TaskMonitor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.Tasks.TaskMonitor.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.Tasks.TaskMonitor.CreateTask(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.String)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="state"></param>
            <param name="cancellationToken"></param>
            <param name="taskCreationOptions"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.Tasks.TaskMonitor.CreateTask``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="state"></param>
            <param name="cancellationToken"></param>
            <param name="taskCreationOptions"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.Tasks.TaskMonitor.ToStringTableString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.Tasks.TaskMonitor.RemoveGarbageCollectedTasks">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.Tasks.WorkerTask">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.Tasks.WorkerTask.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.String)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="state"></param>
            <param name="cancellationToken"></param>
            <param name="taskCreationOptions"></param>
            <param name="name"></param>
        </member>
        <member name="T:Foundation.Threading.AsyncQueue">
            <summary>
            Asynchronous producer/consumer queue handler class.
            </summary>
        </member>
        <member name="M:Foundation.Threading.AsyncQueue.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.AsyncQueue.Initialize(System.String,Foundation.Threading.IAsyncQueue,System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Inherited class must call this initializer method first.
            </summary>
            <param name="name">The name of the <see cref="T:Foundation.Threading.AsyncQueue"/></param>
            <param name="asyncQueue">The <see cref="T:Foundation.Threading.IAsyncQueue"/> implementation</param>
            <param name="consumerCount">Number of consumers</param>
            <param name="priority">priority of consumer threads</param>
        </member>
        <member name="M:Foundation.Threading.AsyncQueue.#ctor(System.String,Foundation.Threading.IAsyncQueue,System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Calls <see cref="M:Foundation.Threading.AsyncQueue.Initialize(System.String,Foundation.Threading.IAsyncQueue,System.Int32,System.Threading.ThreadPriority)"/> method.
            </summary>
            <param name="name"></param>
            <param name="asyncQueue"></param>
            <param name="consumerCount"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Foundation.Threading.AsyncQueue.Enqueue(System.Object)">
            <summary>
            Adds an item to the queue.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Foundation.Threading.AsyncQueue.Count">
            <summary>
            Gets the number of unconsumed items (queued items).
            </summary>
        </member>
        <member name="P:Foundation.Threading.AsyncQueue.Consumers">
            <summary>
            Gets the consumer thread list.
            </summary>
        </member>
        <member name="T:Foundation.Threading.AsyncQueueConsumeEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.AsyncQueueConsumeEventArgs.Item">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.IAsyncQueue">
            <summary>
            AsyncQueue implementors must implement this interface.
            </summary>
        </member>
        <member name="M:Foundation.Threading.IAsyncQueue.CreateConsumer(Foundation.Threading.WorkerThread,System.Int32)">
            <summary>
            Creates an <see cref="T:Foundation.Threading.IConsumer"/> instance.
            </summary>
            <param name="thread">The conmsumer will run in this thread</param>
            <param name="id">The id of the consumer</param>
        </member>
        <member name="P:Foundation.Threading.IAsyncQueue.BeforeConsume">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.IAsyncQueue.AfterConsume">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.IConsumer">
            <summary>
            AsyncQueue implementors must implement this interface.
            </summary>
        </member>
        <member name="M:Foundation.Threading.IConsumer.Enter">
            <summary>
            Called when Consumer's thread is started and before the first item is consumed by this Consumer.
            </summary>
            <returns>A state object can be returned. <see cref="M:Foundation.Threading.IConsumer.Exit(System.Object)"/> is called with this state object.</returns>
        </member>
        <member name="M:Foundation.Threading.IConsumer.Consume(System.Object)">
            <summary>
            Called when an item from the queue is to be consumed by this consumer.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Threading.IConsumer.Exit(System.Object)">
            <summary>
            Called when the thread is terminating.
            </summary>
            <param name="state">The object returned by <see cref="M:Foundation.Threading.IConsumer.Enter"/>.</param>
        </member>
        <member name="T:Foundation.Threading.ILoopable">
            <summary>
            LoopThread implementors must implement this interface
            </summary>
        </member>
        <member name="M:Foundation.Threading.ILoopable.First(System.Exception)">
            <summary>
            This method is called before starting the loop.
            </summary>
        </member>
        <member name="M:Foundation.Threading.ILoopable.Next">
            <summary>thread.IsRunning
            This method is called in a loop.
            If an exception is occured in the loop the loop restarts with <see cref="M:Foundation.Threading.ILoopable.First(System.Exception)"/>.
            </summary>
        </member>
        <member name="M:Foundation.Threading.ILoopable.Last">
            <summary>
            This method is called after terminating the loop.
            </summary>
        </member>
        <member name="T:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler">
            <summary>
            Provides a task scheduler that ensures a maximum concurrency level while
            running on top of the ThreadPool.
            </summary>
        </member>
        <member name="F:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary>
        </member>
        <member name="F:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary>
        </member>
        <member name="F:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary>
        </member>
        <member name="F:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary>
        </member>
        <member name="M:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
        </member>
        <member name="M:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="P:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="P:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler.QueuedItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler.ThreadCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
        <member name="T:Foundation.Threading.LoopThread">
            <summary>
            This class is a specialized <see cref="T:Foundation.Threading.WorkerThread"/> which
            repeats an operation until the operation is stopped.
            E.g Windows Services can use this class.
            </summary>
            <remarks>
            There are two ways to use this class:
            <list type="table">
            <item>
                   <term>With inheritance</term>
                   <description>Call ctor</description>
               </item>
            <item>
                   <term>Without inheritance (as a member field)</term>
                   <description>Call <see cref="M:Foundation.Threading.LoopThread.Initialize(Foundation.Threading.ILoopable)"/></description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="M:Foundation.Threading.LoopThread.#ctor">
            <summary>
            Inherited class must call this constructor.
            </summary>
        </member>
        <member name="M:Foundation.Threading.LoopThread.#ctor(Foundation.Threading.ILoopable)">
            <summary>
            If this class is not inherited the caller can initialize the instance here.
            </summary>
            <param name="loopable"></param>
        </member>
        <member name="P:Foundation.Threading.LoopThread.Thread">
            <summary>
            Gets the underlying <see cref="T:Foundation.Threading.WorkerThread"/>.
            </summary>
        </member>
        <member name="M:Foundation.Threading.LoopThread.Initialize(Foundation.Threading.ILoopable)">
            <summary>
            Inherited class must initialize the base class with this method.
            </summary>
            <param name="loopable"></param>
        </member>
        <member name="T:Foundation.Threading.PriorityMonitor`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Threading.PriorityMonitor`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="monitoredObject"></param>
        </member>
        <member name="P:Foundation.Threading.PriorityMonitor`1.MonitoredObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.PriorityMonitor`1.CurrentLockRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.PriorityMonitor`1.Enter(System.Int32)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.PriorityMonitor`1.TryEnter(System.Int32)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Threading.PriorityMonitor`1.LockRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.PriorityMonitor`1.LockRequest.Monitor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.PriorityMonitor`1.LockRequest.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.PriorityMonitor`1.LockRequest.AsyncWaitHandle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.PriorityMonitor`1.LockRequest.IsCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.SingleThreadPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.SingleThreadPool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.SingleThreadPool.Thread">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.SingleThreadPool.QueuedItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.SingleThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:Foundation.Threading.SingleThreadPool.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.ThreadMonitor">
            <summary>
            Monitors threads in the current process.
            <see cref="T:Foundation.Threading.WorkerThread"/> instances are automatically added to this singleton.
            </summary>
        </member>
        <member name="P:Foundation.Threading.ThreadMonitor.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.ThreadMonitor.ThreadPoolToStringTableString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.ThreadMonitor.ToStringTableString">
            <summary>
            Retrieves the state of the threads in table format.
            </summary>
        </member>
        <member name="M:Foundation.Threading.ThreadMonitor.Join(System.Int32)">
            <summary>
            Tries to join (<see cref="M:System.Threading.Thread.Join(System.Int32)"/>) threads and removes the joined threads from the list of monitored threads.
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerEvent.Reset">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.WorkerEvent.Set">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Threading.WorkerThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.#ctor(System.Threading.ThreadStart)">
            <summary>
            
            </summary>
            <param name="start"></param>
        </member>
        <member name="E:Foundation.Threading.WorkerThread.Started">
            <summary>
            
            </summary>
        </member>
        <member name="E:Foundation.Threading.WorkerThread.Stopped">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.IsPauseRequested">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.IsStopRequested">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.ThreadState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.PauseRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.StopRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.ManagedThreadId">
            <summary>
             Gets a unique identifier for the current managed thread.
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.Name">
            <summary>
             Gets or sets the name of the thread.
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.Priority">
            <summary>
             Gets or sets a value indicating the scheduling priority of a thread.
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.IsBackground">
            <summary>
             Gets or sets a value indicating whether or not a thread is a background thread.
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThread.Thread">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.Pause">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.Continue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.WaitForStopOrContinue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.Join">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.Join(System.Int32)">
            <summary>
            
            </summary>
            <param name="millisecondsTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.WaitForStop(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.WaitForStop(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.WorkerThread.Abort">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.WorkerThreadCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadCollection.Insert(System.Int32,Foundation.Threading.WorkerThread)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadCollection.Add(Foundation.Threading.WorkerThread)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadCollection.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadCollection.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadCollection.Stop(System.Threading.EventWaitHandle)">
            <summary>
            
            </summary>
            <param name="stopEvent"></param>
        </member>
        <member name="T:Foundation.Threading.WorkerThreadPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPool.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxThreadCount"></param>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPool.QueueUserWorkItem(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadPool.QueuedItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadPool.Dequeuers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadPool.ActiveThreadCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadPool.MaxThreadCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.WorkerThreadPoolDequeuer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuer.#ctor(System.Threading.WaitCallback)">
            <summary>
            
            </summary>
            <param name="callback"></param>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadPoolDequeuer.Thread">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Threading.WorkerThreadPoolDequeuerCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadPoolDequeuerCollection.Threads">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.Add(Foundation.Threading.WorkerThreadPoolDequeuer)">
            <summary>
            
            </summary>
            <param name="dequeuer"></param>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.Remove(Foundation.Threading.WorkerThreadPoolDequeuer)">
            <summary>
            
            </summary>
            <param name="dequeuer"></param>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.IndexOf(Foundation.Threading.WorkerThreadPoolDequeuer)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.Insert(System.Int32,Foundation.Threading.WorkerThreadPoolDequeuer)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadPoolDequeuerCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.Contains(Foundation.Threading.WorkerThreadPoolDequeuer)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.CopyTo(Foundation.Threading.WorkerThreadPoolDequeuer[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadPoolDequeuerCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Threading.WorkerThreadPoolDequeuerCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolDequeuerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Threading.IWaitCallbackFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.IWaitCallbackFactory.CreateWaitCallback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Threading.WorkerThreadPoolManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolManager.#ctor(Foundation.Threading.WorkerThreadPool,Foundation.Threading.IWaitCallbackFactory)">
            <summary>
            
            </summary>
            <param name="pool"></param>
            <param name="waitCallbackFactory"></param>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolManager.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Threading.WorkerThreadPoolManager.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Diagnostics.AppDomainMonitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.AppDomainMonitor.GetDotNetFrameworkRelease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Diagnostics.AppDomainMonitor.GetDotNetFrameworkVersion(System.Int32)">
            <summary>
            
            </summary>
            <param name="release"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Diagnostics.AppDomainMonitor.EnvironmentInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.AppDomainMonitor.CurrentDomainState">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.AppDomainMonitor.AppendAppDomainState(System.AppDomain,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="appDomain"></param>
            <param name="sb"></param>
        </member>
        <member name="T:Foundation.Diagnostics.Contracts.FoundationContract">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.Contracts.FoundationContract.Assert(System.Boolean)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Diagnostics.Contracts.FoundationContract.Assert(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <param name="userMessage"></param>
        </member>
        <member name="M:Foundation.Diagnostics.Contracts.FoundationContract.Requires``1(System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="condition"></param>
        </member>
        <member name="M:Foundation.Diagnostics.Contracts.FoundationContract.Requires``1(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="condition"></param>
            <param name="userMessage"></param>
        </member>
        <member name="M:Foundation.Diagnostics.Contracts.FoundationContract.Ensures(System.Boolean)">
            <summary>
            
            </summary>
            <param name="condition"></param>
        </member>
        <member name="T:Foundation.Diagnostics.DebugWriter">
            <summary>
            Summary description for DebugWriter.
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.DebugWriter.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.DebugWriter.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.DebugWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="T:Foundation.Diagnostics.Error">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.Error.#ctor(Foundation.Diagnostics.ErrorType,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Foundation.Diagnostics.Error.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Diagnostics.ErrorCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Diagnostics.ErrorType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.ErrorType.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.ErrorType.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.ErrorType.Information">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Diagnostics.GarbageMonitor">
            <summary>
            Summary description for GcMonitor.
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.GarbageMonitor.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.GarbageMonitor.State">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.GarbageMonitor.Add(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="target"></param>
        </member>
        <member name="M:Foundation.Diagnostics.GarbageMonitor.Add(System.String,System.String,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="typeName"></param>
            <param name="size"></param>
            <param name="target"></param>
        </member>
        <member name="M:Foundation.Diagnostics.GarbageMonitor.SetDisposeTime(System.Object,System.DateTime)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="disposeTime"></param>
        </member>
        <member name="T:Foundation.Diagnostics.Int64PerformanceCounter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.Int64PerformanceCounter.#ctor(System.String,System.Func{System.Int64,System.String})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="toString"></param>
        </member>
        <member name="M:Foundation.Diagnostics.Int64PerformanceCounter.Increment(System.Int64)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Foundation.Diagnostics.Int64PerformanceCounter.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.Int64PerformanceCounter.Sum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.Int64PerformanceCounter.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.Int64PerformanceCounter.Max">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.Int64PerformanceCounter.ToLogString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Diagnostics.MethodProfiler.MethodProfiler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.MethodProfiler.MethodProfiler.ConditionString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.MethodProfiler.MethodProfiler.BeginMethod">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.MethodProfiler.MethodProfiler.BeginMethodFraction(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Foundation.Diagnostics.MethodProfiler.MethodProfiler.EndMethod">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.MethodProfiler.MethodProfiler.EndMethodFraction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.MethodProfiler.MethodProfiler.Close">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Diagnostics.Progress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.Progress.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="timeout"></param>
        </member>
        <member name="E:Foundation.Diagnostics.Progress.Updated">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.Progress.Increment">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Diagnostics.Progress.UpdatedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.Progress.UpdatedEventArgs.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Diagnostics.Progress.UpdatedEventArgs.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Diagnostics.StackTraceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.StackTraceExtensions.ToLogString(System.Diagnostics.StackTrace)">
            <summary>
            
            </summary>
            <param name="trace"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Diagnostics.StackTraceExtensions.GetTrace(System.Int32)">
            <summary>
            
            </summary>
            <param name="skipFrames"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Diagnostics.StopwatchTimeSpan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.TicksPerTick">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.TicksPerMicrosecond">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.TicksPerMillisecond">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.TicksPerSecond">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.TicksPerMinute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.TicksPerHour">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.TicksPerDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.SecondsPerMinute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.SecondsPerHour">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Diagnostics.StopwatchTimeSpan.SecondsPerDay">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.StopwatchTimeSpan.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="ticks"></param>
        </member>
        <member name="M:Foundation.Diagnostics.StopwatchTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="timeSpan"></param>
        </member>
        <member name="P:Foundation.Diagnostics.StopwatchTimeSpan.Ticks">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.StopwatchTimeSpan.Elapsed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.StopwatchTimeSpan.TotalHours">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.StopwatchTimeSpan.TotalMinutes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.StopwatchTimeSpan.TotalSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.StopwatchTimeSpan.TotalMilliseconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.StopwatchTimeSpan.TotalMicroseconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.StopwatchTimeSpan.TotalNanoseconds">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.StopwatchTimeSpan.ToInt32(System.Int64,System.Int32)">
            <summary>
            
            </summary>
            <param name="ticks"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Diagnostics.StopwatchTimeSpan.ToInt64(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="ticks"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Diagnostics.StopwatchTimeSpan.ToString(System.Int64,System.Int32)">
            <summary>
            
            </summary>
            <param name="ticks"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Diagnostics.StopwatchTimeSpan.ToTicks(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Diagnostics.StopwatchTimeSpan.ToTimeSpan(System.Int64)">
            <summary>
            
            </summary>
            <param name="elapsed"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Diagnostics.StopwatchTimeSpan.ToString(System.Int32)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Diagnostics.StopwatchTimeSpan.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Diagnostics.TraceWriter">
            <summary>
            Summary description for TraceWriter.
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.TraceWriter.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Diagnostics.TraceWriter.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Diagnostics.TraceWriter.Write(System.Char)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Foundation.Diagnostics.TraceWriter.Write(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Foundation.Diagnostics.TraceWriter.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="T:Foundation.Log.CallerInformation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.CallerInformation.CallerMemberName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.CallerInformation.CallerFilePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.CallerInformation.CallerLineNumber">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.CallerInformation.Get(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="callerMemberName"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Log.ConsoleLogWriter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.ConsoleLogWriter.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Log.EventLogWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.EventLogWriter.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="logName"></param>
            <param name="machineName"></param>
            <param name="source"></param>
        </member>
        <member name="M:Foundation.Log.EventLogWriter.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.EventLogWriter.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.EventLogWriter.Close">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Log.FileLogWriter">
            <summary>
            <see cref="T:Foundation.Log.ILogWriter"/> implementation for logging a multithreaded application into a file.
            </summary>
        </member>
        <member name="M:Foundation.Log.FileLogWriter.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32,System.TimeSpan,System.Boolean,System.IO.FileAttributes,System.DateTimeKind)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
            <param name="async"></param>
            <param name="bufferSize"></param>
            <param name="timerPeriod"></param>
            <param name="autoFlush"></param>
            <param name="fileAttributes"></param>
            <param name="dateTimeKind"></param>
        </member>
        <member name="P:Foundation.Log.FileLogWriter.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Log.ILog">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.ILog.IsErrorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.ILog.IsWarningEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.ILog.IsInformationEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.ILog.IsTraceEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.ILog.IsDebugEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.ILog.Debug(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Debug(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Debug(System.Func{System.String})">
            <summary>
            
            </summary>
            <param name="getMessage"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Trace(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Trace(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Trace(System.Func{System.String})">
            <summary>
            
            </summary>
            <param name="getMessage"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Information(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Information(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Information(System.Func{System.String})">
            <summary>
            
            </summary>
            <param name="getMessage"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Warning(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Warning(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Warning(System.Func{System.String})">
            <summary>
            
            </summary>
            <param name="getMessage"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Error(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Error(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Error(System.Func{System.String})">
            <summary>
            
            </summary>
            <param name="getMessage"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Write(Foundation.Log.LogLevel,System.String)">
            <summary>
            
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Write(Foundation.Log.LogLevel,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logLevel"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Foundation.Log.ILog.Write(Foundation.Log.LogLevel,System.Func{System.String})">
            <summary>
            
            </summary>
            <param name="logLevel"></param>
            <param name="getMessage"></param>
        </member>
        <member name="T:Foundation.Log.LogExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.LogExtensions.Trace(Foundation.Log.ILog,Foundation.Log.CallerInformation,System.String)">
            <summary>
            
            </summary>
            <param name="log"></param>
            <param name="callerInformation"></param>
            <param name="message"></param>
        </member>
        <member name="M:Foundation.Log.LogExtensions.Trace(Foundation.Log.ILog,Foundation.Log.CallerInformation,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="log"></param>
            <param name="callerInformation"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:Foundation.Log.ILogFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.ILogFactory.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.ILogFactory.GetLog(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Log.LogFactoryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.LogFactoryExtensions.GetTypeLog(Foundation.Log.ILogFactory,System.Type)">
            <summary>
            
            </summary>
            <param name="applicationLog"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Log.LogFactoryExtensions.GetCurrentTypeLog(Foundation.Log.ILogFactory)">
            <summary>
            
            </summary>
            <param name="applicationLog"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Log.LogFactoryExtensions.GetCurrentTypeSectionLog(Foundation.Log.ILogFactory,System.String)">
            <summary>
            
            </summary>
            <param name="applicationLog"></param>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Log.LogFactoryExtensions.GetCurrentMethodLog(Foundation.Log.ILogFactory,System.Object[])">
            <summary>
            
            </summary>
            <param name="applicationLog"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Log.ILogWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.ILogWriter.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.ILogWriter.Write(Foundation.Log.LogEntry)">
            <summary>
            Writes a message to the output.
            </summary>
            <param name="logEntry"></param>
        </member>
        <member name="M:Foundation.Log.ILogWriter.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.ILogWriter.Close">
            <summary>
            Closes the LogWriter (e.g. file, database connection etc.)
            </summary>
        </member>
        <member name="T:Foundation.Log.LogEntry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.LogEntry.#ctor(System.Int64,System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,Foundation.Log.LogLevel)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="logName"></param>
            <param name="creationTime"></param>
            <param name="managedThreadId"></param>
            <param name="threadName"></param>
            <param name="userName"></param>
            <param name="hostName"></param>
            <param name="message"></param>
            <param name="logLevel"></param>
        </member>
        <member name="P:Foundation.Log.LogEntry.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.LogEntry.LogName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.LogEntry.CreationTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.LogEntry.ManagedThreadId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.LogEntry.ThreadName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.LogEntry.HostName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.LogEntry.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.LogEntry.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.LogEntry.LogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Log.LogFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.LogFactory.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.LogFactory.Read">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Log.LogLevel">
            <summary>
            The verbosity of logging.
            </summary>
        </member>
        <member name="F:Foundation.Log.LogLevel.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Log.LogLevel.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Log.LogLevel.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Log.LogLevel.Trace">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Log.LogLevel.Debug">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Log.LogState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Log.LogState.Closed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Log.LogState.Open">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Log.MemoryLogWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.MemoryLogWriter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Log.MemoryLogWriter.LogEntries">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Log.SqlLogWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Log.SqlLogWriter.#ctor(System.Func{System.Data.IDbConnection},System.Func{Foundation.Log.LogEntry,System.String},System.Int32,Foundation.Threading.SingleThreadPool)">
            <summary>
            
            </summary>
            <param name="createConnection"></param>
            <param name="logEntryToCommandText"></param>
            <param name="commandTimeout"></param>
            <param name="singleThreadPool"></param>
        </member>
        <member name="T:Foundation.Log.TextLogWriter">
            <summary>
            Writes log events to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            Use the following TextWriters for immediate logging your application:
            <list type="table">
                   <listheader>
                       <term>Name</term>
                       <description>Description</description>
                   </listheader>
                   <item>
                       <term><see cref="T:Foundation.Diagnostics.DebugWriter"/></term>
                       <description>Uses OutputDebugString.</description>    
                   </item>
                   <item>
                       <term><see cref="T:Foundation.Diagnostics.TraceWriter"/></term>
                       <description>Uses <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)"/></description>
                   </item>
               </list>
            </remarks>
        </member>
        <member name="M:Foundation.Log.TextLogWriter.#ctor(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="T:Foundation.DocumentProperties.Document">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.DocumentProperties.Document.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.DocumentProperties.Document.Open(System.String,Foundation.DocumentProperties.DocumentType)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="documentType"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.DocumentProperties.Document.GetOpenXmlPackageProperties(System.IO.Packaging.Package)">
            <summary>
            
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.DocumentProperties.DocumentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.DocumentProperties.DocumentProperty.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.DocumentProperties.DocumentProperty.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.DocumentProperties.DocumentPropertyId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.ContentStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Created">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Creator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Description">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Identifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Keywords">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Language">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.LastModifiedBy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.LastPrinted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Manager">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Modified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Revision">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Subject">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Title">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Version">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Template">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.TotalTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Pages">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Words">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Characters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Application">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.DocSecurity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Lines">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Paragraphs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.ScaleCrop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.HeadingPairs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.TitlesOfParts">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.Company">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.LinksUpToDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.CharactersWithSpaces">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.SharedDoc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.HyperLinkChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentPropertyId.AppVersion">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.DocumentProperties.DocumentPropertyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.DocumentProperties.DocumentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentType.StucturedStorage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.DocumentProperties.DocumentType.OpenXml">
            <summary>
            
            </summary>ftim
        </member>
        <member name="T:Foundation.DocumentProperties.StructuredStorage.PropVariant">
            <summary>
            Represents the OLE struct PROPVARIANT.
            </summary>
            <remarks>
            Must call Clear when finished to avoid memory leaks. If you get the value of
            a VT_UNKNOWN prop, an implicit AddRef is called, thus your reference will
            be active even after the PropVariant struct is cleared.
            </remarks>
        </member>
        <member name="M:Foundation.DocumentProperties.StructuredStorage.PropVariant.GetDataBytes">
            <summary>
            Gets a byte array containing the data bits of the struct.
            </summary>
            <returns>A byte array that is the combined size of the data bits.</returns>
        </member>
        <member name="M:Foundation.DocumentProperties.StructuredStorage.PropVariant.PropVariantClear(Foundation.DocumentProperties.StructuredStorage.PropVariant@)">
            <summary>
            Called to properly clean up the memory referenced by a PropVariant instance.
            </summary>
        </member>
        <member name="M:Foundation.DocumentProperties.StructuredStorage.PropVariant.Clear">
            <summary>
            Called to clear the PropVariant's referenced and local memory.
            </summary>
            <remarks>
            You must call Clear to avoid memory leaks.
            </remarks>
        </member>
        <member name="P:Foundation.DocumentProperties.StructuredStorage.PropVariant.Type">
            <summary>
            Gets the variant type.
            </summary>
        </member>
        <member name="P:Foundation.DocumentProperties.StructuredStorage.PropVariant.Value">
            <summary>
            Gets the variant value.
            </summary>
        </member>
        <member name="T:Foundation.IDateTimeProviderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IDateTimeProviderExtensions.Today(Foundation.IDateTimeProvider)">
            <summary>
            
            </summary>
            <param name="dateTimeProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.IO.AsyncTextWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.AsyncTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="M:Foundation.IO.AsyncTextWriter.Write(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.IO.AsyncTextWriter.Write(Foundation.IO.IFormatter,System.Object[])">
            <summary>
            
            </summary>
            <param name="formatter"></param>
            <param name="args"></param>
        </member>
        <member name="M:Foundation.IO.AsyncTextWriter.Close">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.IO.EventableStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.EventableStream.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Foundation.IO.EventableStream.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.EventableStream.CanSeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.EventableStream.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.EventableStream.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.EventableStream.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.EventableStream.Position">
            <summary>
            
            </summary>
        </member>
        <member name="E:Foundation.IO.EventableStream.BeforeRead">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.EventableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.IO.EventableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.IO.EventableStream.SetLength(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.IO.EventableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="T:Foundation.IO.FileSystemMonitor">
            <summary>
            Periodically checks a directory for file creations/deletions
            and raises events when a new file is created or a file is deleted.
            Can be used for monitoring network shares for new files.
            </summary>
            <remarks>
            <see cref="T:System.IO.FileSystemWatcher"/> is based on NTFS events which cannot be used on network shares.
            </remarks>
        </member>
        <member name="M:Foundation.IO.FileSystemMonitor.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Foundation.IO.FileSystemMonitor"/> class.
            </summary>
            <param name="path">
            The directory to monitor, in standard or Universal Naming Convention (UNC) notation.
            </param>
            <param name="searchPattern">
            The search string to match against the names of files in path.
            The parameter cannot end in two periods ("..") or contain two periods ("..")
            followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars. 
            </param>
            <param name="period">
            milliseconds
            </param>
        </member>
        <member name="P:Foundation.IO.FileSystemMonitor.Created">
            <summary>
            Occurs when a file or directory in the specified path is created.
            </summary>
        </member>
        <member name="T:Foundation.IO.FileSystemWatcher">
            <summary>
            Encapsulates <see cref="T:System.IO.FileSystemWatcher"/> to minimize number of OnChange events
            and resolve short and long filename problem.
            </summary>
        </member>
        <member name="M:Foundation.IO.FileSystemWatcher.#ctor(System.String)">
            <summary>
            Creates a new instance to watch NTFS events.
            </summary>
            <param name="fileName">The file to watch</param>
        </member>
        <member name="P:Foundation.IO.FileSystemWatcher.NotifyFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.FileSystemWatcher.EnableRaisingEvents">
            <summary>
            <see cref="P:System.IO.FileSystemWatcher.EnableRaisingEvents"/>
            </summary>
        </member>
        <member name="P:Foundation.IO.FileSystemWatcher.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.FileSystemWatcher.ShortFileName">
            <summary>
            Gets the Int16 version of the fileName
            </summary>
        </member>
        <member name="T:Foundation.IO.IFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.IFormatter.AppendTo(System.Text.StringBuilder,System.Object[])">
            <summary>
            
            </summary>
            <param name="sb"></param>
            <param name="args"></param>
        </member>
        <member name="T:Foundation.IO.Indentation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.Indentation.#ctor(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="T:Foundation.IO.MultiTextWriter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.MultiTextWriter.TextWriters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.MultiTextWriter.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.MultiTextWriter.Write(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.IO.MultiTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Foundation.IO.MultiTextWriter.Write(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Foundation.IO.SegmentedStreamReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.SegmentedStreamReader.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="length"></param>
        </member>
        <member name="M:Foundation.IO.SegmentedStreamReader.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Foundation.IO.SegmentedStreamReader.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.SegmentedStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.IO.SegmentedStreamReader.SetLength(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.IO.SegmentedStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.IO.SegmentedStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:Foundation.IO.SegmentedStreamReader.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.SegmentedStreamReader.CanSeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.SegmentedStreamReader.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.SegmentedStreamReader.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IO.SegmentedStreamReader.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.IO.StreamWriterTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.StreamWriterTransaction.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="tempPath"></param>
        </member>
        <member name="M:Foundation.IO.StreamWriterTransaction.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="tempPath"></param>
            <param name="encoding"></param>
        </member>
        <member name="P:Foundation.IO.StreamWriterTransaction.Writer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.StreamWriterTransaction.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.StreamWriterTransaction.System#IDisposable#Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.IO.StringBuilderReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.StringBuilderReader.#ctor(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="stringBuilder"></param>
        </member>
        <member name="M:Foundation.IO.StringBuilderReader.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.IO.StringBuilderReader.Read">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.IO.StringBuilderReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.IO.TempFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.TempFile.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.TempFile.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
        </member>
        <member name="P:Foundation.IO.TempFile.Filename">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.TempFile.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.IO.TreeTextWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.TreeTextWriter.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            
            </summary>
            <param name="textWriter"></param>
            <param name="indentation"></param>
        </member>
        <member name="P:Foundation.IO.TreeTextWriter.ForegroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.IO.TreeTextWriter.WriteStartElement(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.IO.TreeTextWriter.WriteStartElement(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Foundation.IO.TreeTextWriter.WriteEndElement(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.IO.TreeTextWriter.WriteEndElement(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Foundation.IO.TreeTextWriter.WriteElement(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.IO.TreeTextWriter.WriteElement(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Foundation.IO.TreeTextWriter.WriteElement(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Foundation.IDateTimeProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.IDateTimeProvider.Now">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Linq.ArrayExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.ArrayExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0[]})">
            <summary>
            
            </summary>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ArrayExtensions.Concat``1(``0[][])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ArrayExtensions.Contains``1(``0[],``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="item"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ArrayExtensions.Contains``1(``0[],``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ArrayExtensions.IndexOf``1(``0[],``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="item"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ArrayExtensions.IsNullOrEmpty(System.Array)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.EnumExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.EnumExtensions.SetFlag``1(``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.EnumExtensions.SetFlag``1(``0,``0,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <param name="flag"></param>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.EnumExtensions.ResetFlag``1(``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.EnumExtensions.GetPublicStaticFields``1(System.Type)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.ExceptionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.ExceptionExtensions.ToLogString(System.Exception)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ExceptionExtensions.Append(System.Text.StringBuilder,System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="sb"></param>
        </member>
        <member name="T:Foundation.Linq.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.Extensions.ItemToArray``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.Extensions.ItemAsEnumerable``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.Extensions.IfArgumentIs``2(``0,System.Action{``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:Foundation.Linq.Extensions.IfAsNotNull``2(``0,System.Action{``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:Foundation.Linq.Extensions.In``1(``0,``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.Extensions.ReferenceEquals``1(``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objA"></param>
            <param name="objB"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.Extensions.ToLogXmlString(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.Extensions.SerializeToXmlString(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.FuncExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.FuncExtensions.AsAction``1(System.Func{``0})">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.FuncExtensions.AsAction``2(System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.FuncExtensions.AsAction``3(System.Func{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.FuncExtensions.AsAction``4(System.Func{``0,``1,``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.FuncExtensions.AsAction``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.ICollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items"></param>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.AsReadOnly``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.Cast``1(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.HasElements``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.ICollectionExtensions.CastedCollection`1">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Foundation.Linq.ICollectionExtensions.CastedCollection`1.source">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.CastedCollection`1.#ctor(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.CastedCollection`1.System#Collections#Generic#ICollection{TResult}#Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.CastedCollection`1.System#Collections#Generic#ICollection{TResult}#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.CastedCollection`1.System#Collections#Generic#ICollection{TResult}#Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.CastedCollection`1.System#Collections#Generic#ICollection{TResult}#CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Foundation.Linq.ICollectionExtensions.CastedCollection`1.System#Collections#Generic#ICollection{TResult}#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Linq.ICollectionExtensions.CastedCollection`1.System#Collections#Generic#ICollection{TResult}#IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.CastedCollection`1.System#Collections#Generic#ICollection{TResult}#Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.CastedCollection`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.CastedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.collection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.ICollectionExtensions.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.IdentityFunction`1">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="P:Foundation.Linq.IdentityFunction`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Linq.IDictionaryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.IDictionaryExtensions.Add``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="items"></param>
            <param name="keySelector"></param>
        </member>
        <member name="M:Foundation.Linq.IDictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="valueFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IDictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.IDictionaryExtensions.ReadOnlyDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Foundation.Linq.IDictionaryExtensions.ReadOnlyDictionary`2.dictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.IDictionaryExtensions.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="T:Foundation.Linq.IEnumerableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.SelectPreviousAndCurrent``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.SelectPreviousAndCurrentKey``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.GetPartitions``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <param name="partitionCount"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="isSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.ToDynamicArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="initialSize"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.ToLogString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="toString"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.ToSegmentedCollection``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="segmentSize"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.ToSortedDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.ToSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="separator"></param>
            <param name="toString"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IReadOnlyCollection{Foundation.Text.StringTableColumnInfo{``0}})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.IEnumerableIndexedItemExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.IEnumerableIndexedItemExtensions.FirstIndexedItem``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableIndexedItemExtensions.ExtremumIndexedItem``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="firstArgumentIsExtremum"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumerableIndexedItemExtensions.MinIndexedItem``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.IEnumeratorExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.IEnumeratorExtensions.AsEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IEnumeratorExtensions.Take``1(System.Collections.Generic.IEnumerator{``0},System.Int32)">
            <summary>
            
            </summary>
            <param name="enumerator"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.IListExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.IListExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IListExtensions.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IListExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.IndexedItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.IndexedItem.Create``1(System.Int32,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.IndexedItemAndPreviousItem`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Linq.IndexedItemAndPreviousItem`1.#ctor(`0,Foundation.Linq.IndexedItem{`0})">
            <summary>
            
            </summary>
            <param name="previousItem"></param>
            <param name="currentItem"></param>
        </member>
        <member name="P:Foundation.Linq.IndexedItemAndPreviousItem`1.PreviousItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Linq.IndexedItemAndPreviousItem`1.CurrentItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Linq.IndexedItem`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Linq.IndexedItem`1.#ctor(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.Linq.IndexedItem`1.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Linq.IndexedItem`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Linq.IProducerConsumerCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.IProducerConsumerCollectionExtensions.Take``1(System.Collections.Concurrent.IProducerConsumerCollection{``0},``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.IReadOnlyListExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.IReadOnlyListExtensions.AsReadOnlyNonUniqueSortedList``2(System.Collections.Generic.IReadOnlyList{``1},System.Func{``1,``0})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="values"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IReadOnlyListExtensions.AsReadOnlySortedList``2(System.Collections.Generic.IReadOnlyList{``1},System.Func{``1,``0})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="values"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IReadOnlyListExtensions.First``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Linq.IReadOnlyListExtensions.FirstOrDefault``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.MinMaxResult`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Linq.MinMaxResult`1.#ctor(System.Int32,System.Int32,Foundation.Linq.IndexedItem{`0},Foundation.Linq.IndexedItem{`0})">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="whereCount"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="P:Foundation.Linq.MinMaxResult`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Linq.MinMaxResult`1.WhereCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Linq.MinMaxResult`1.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Linq.MinMaxResult`1.Max">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Linq.PreviousAndCurrent`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Foundation.Linq.PreviousAndCurrent`1.Previous">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Linq.PreviousAndCurrent`1.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Linq.QueueExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.QueueExtensions.DequeueTail``1(System.Collections.Generic.Queue{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Linq.TimeSpanExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Linq.TimeSpanExtensions.GetTotalMicroseconds(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Management.InitiateShutdownReturnValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.InitiateShutdownReturnValue.CompletedWithNoError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.InitiateShutdownReturnValue.MethodParametersChecked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.InitiateShutdownReturnValue.Failed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.InitiateShutdownReturnValue.AccessDenied">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Management.ManagementJob">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Management.ManagementJob.#ctor(System.Management.ManagementObject)">
            <summary>
            
            </summary>
            <param name="managementObject"></param>
        </member>
        <member name="P:Foundation.Management.ManagementJob.JobState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Management.ManagementJob.PercentComplete">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Management.ManagementJobState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.ManagementJobState.Running">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Management.ManagementScopeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Management.ManagementScopeExtensions.ExecuteQuery``1(System.Management.ManagementScope,System.String,System.Func{System.Management.ManagementObject,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="managementScope"></param>
            <param name="query"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Management.MsvmComputerSystem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Management.MsvmComputerSystem.#ctor(System.Management.ManagementObject)">
            <summary>
            
            </summary>
            <param name="managementObject"></param>
        </member>
        <member name="M:Foundation.Management.MsvmComputerSystem.GetByName(System.Management.ManagementScope,System.String)">
            <summary>
            
            </summary>
            <param name="managementScope"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Management.MsvmComputerSystem.GetByElementName(System.Management.ManagementScope,System.String)">
            <summary>
            
            </summary>
            <param name="managementScope"></param>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Management.MsvmComputerSystem.GetByElementNames(System.Management.ManagementScope,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="managementScope"></param>
            <param name="elementNames"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Management.MsvmComputerSystem.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Management.MsvmComputerSystem.EnabledState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Management.MsvmComputerSystem.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Management.MsvmComputerSystem.OnTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Management.MsvmComputerSystem.InitiateShutdown(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="force"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Management.MsvmComputerSystem.RequestStateChange(Foundation.Management.MsvmComputerSystemRequestedState,Foundation.Management.ManagementJob@)">
            <summary>
            
            </summary>
            <param name="requestedState"></param>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Management.MsvmComputerSystemEnabledState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Paused">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Suspended">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Starting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Saving">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Stopping">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Pausing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemEnabledState.Resuming">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Management.MsvmComputerSystemRequestedState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemRequestedState.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemRequestedState.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Management.MsvmComputerSystemRequestStateChangeReturnValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemRequestStateChangeReturnValue.CompletedWithNoError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemRequestStateChangeReturnValue.MethodParametersCheckedTransitionStarted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Management.MsvmComputerSystemRequestStateChangeReturnValue.InvalidStateForThisOperation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.ServiceProcess.IService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.ServiceProcess.IService.CanPauseAndContinue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.ServiceProcess.IService.Initialize(System.ServiceProcess.ServiceBase)">
            <summary>
            
            </summary>
            <param name="serviceBase"></param>
        </member>
        <member name="M:Foundation.ServiceProcess.IService.Start(System.String[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.ServiceProcess.IService.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.ServiceProcess.IService.Pause">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.ServiceProcess.IService.Continue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Text.Hex">
            <summary>
            Hex encoding class.
            </summary>
        </member>
        <member name="M:Foundation.Text.Hex.Encode(System.Byte,System.Boolean)">
            <summary>
            byte -> Char[2]
            </summary>
            <param name="value"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.Hex.Encode(System.UInt16,System.Boolean)">
            <summary>
            UInt16 --> Char[4]
            </summary>
            <param name="value"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.Hex.Encode(System.Int32,System.Boolean)">
            <summary>
            int -> Char[8]
            </summary>
            <param name="value"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.Hex.Encode(System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.Hex.Encode(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="length"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.Hex.GetString(System.UInt16,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.Hex.GetString(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.Hex.GetString(System.UInt64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.Hex.GetString(System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Text.StringBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Text.StringBuilderExtensions.Append(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="stringBuilder"></param>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="T:Foundation.Text.StringHelper">
            <exclude/>
        </member>
        <member name="M:Foundation.Text.StringHelper.FormatColumn(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <param name="colWidth"></param>
            <param name="alignRight"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.StringHelper.SetChar(System.String,System.Int32,System.Char)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="index"></param>
            <param name="ch"></param>
        </member>
        <member name="M:Foundation.Text.StringHelper.ToLower(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Foundation.Text.StringHelper.ToUpper(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Foundation.Text.StringHelper.WriteMethod(System.IO.TextWriter,System.Object,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="textWriter"></param>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Foundation.Text.StringHelper.ParseBoolean(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="nullValue"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Text.StringTable">
            <summary>
            Represents a n x m matrix of strings.
            </summary>
        </member>
        <member name="M:Foundation.Text.StringTable.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnCount"></param>
        </member>
        <member name="P:Foundation.Text.StringTable.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Text.StringTable.Rows">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Text.StringTable.NewRow">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.StringTable.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.StringTable.ToString(System.Int32)">
            <summary>
            
            </summary>
            <param name="indent"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.StringTable.ToString(System.Collections.Generic.IReadOnlyList{System.Int32},System.String)">
            <summary>
            
            </summary>
            <param name="columnWidths"></param>
            <param name="columnSeparator"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Text.StringTableColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Text.StringTableColumn.Align">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Text.StringTableColumnAlign">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Text.StringTableColumnAlign.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.Text.StringTableColumnAlign.Right">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Text.StringTableColumnCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Text.StringTableColumnCollection.IndexOf(Foundation.Text.StringTableColumn)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Text.StringTableColumnCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Text.StringTableColumnCollection.Contains(Foundation.Text.StringTableColumn)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Foundation.Text.StringTableColumnCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Text.StringTableColumnCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Text.StringTableColumnCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Text.StringTableColumnInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Text.StringTableColumnInfo.Create``2(System.String,Foundation.Text.StringTableColumnAlign,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="columnName"></param>
            <param name="align"></param>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Text.StringTableColumnInfo`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Text.StringTableColumnInfo`1.#ctor(System.String,Foundation.Text.StringTableColumnAlign,System.Func{`0,System.String})">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="align"></param>
            <param name="toStringFunction"></param>
        </member>
        <member name="P:Foundation.Text.StringTableColumnInfo`1.ColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Text.StringTableColumnInfo`1.Align">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Text.StringTableColumnInfo`1.ToStringFunction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Text.StringTableRow">
            <summary>
            Represents a row in the <see cref="T:Foundation.Text.StringTable"/>.
            </summary>
        </member>
        <member name="M:Foundation.Text.StringTableRow.#ctor(Foundation.Text.StringTable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:Foundation.Text.StringTableRow.Table">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Text.StringTableRow.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Text.StringTableRowCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.Text.StringTableRowCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Text.StringTableRowCollection.Add(Foundation.Text.StringTableRow)">
            <summary>
            
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Foundation.Text.StringTableRowCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Windows.Forms.ControlExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Windows.Forms.ControlExtensions.Invoke(System.Windows.Forms.Control,System.Action)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="action"></param>
        </member>
        <member name="T:Foundation.Windows.Forms.CursorManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Windows.Forms.CursorManager.#ctor(System.Windows.Forms.Cursor)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="M:Foundation.Windows.Forms.CursorManager.System#IDisposable#Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.Windows.Forms.FormPosition">
            <exclude/>
        </member>
        <member name="M:Foundation.Windows.Forms.FormPosition.Save(System.Windows.Forms.Form,Foundation.Configuration.ApplicationData)">
            <summary>
            
            </summary>
            <param name="form"></param>
            <param name="applicationData"></param>
        </member>
        <member name="M:Foundation.Windows.Forms.FormPosition.Load(Foundation.Configuration.ApplicationData,System.Windows.Forms.Form)">
            <summary>
            
            </summary>
            <param name="applicationData"></param>
            <param name="form"></param>
        </member>
        <member name="T:Foundation.Xml.SimpleXmlTextWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Foundation.Xml.SimpleXmlTextWriter"/> class.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.Close">
            <summary>
            When overridden in a derived class, closes this stream and the underlying stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">A call is made to write more output after <see langword="Close"/> has been called or the result of this call is an invalid XML document.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.Flush">
            <summary>
            When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the
            underlying stream.
            </summary>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.LookupPrefix(System.String)">
            <summary>
            When overridden in a derived class, returns the closest prefix defined in the
            current namespace scope for the namespace URI.
            </summary>
            <param name="ns">The namespace URI whose prefix you want to find.</param>
            <returns>
            The matching prefix or <see langword="null"/> if no matching namespace URI is found in the current scope.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="ns"/> is either <see langword="null"/> or string.Empty.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
            <summary>
            When overridden in a derived class, writes out all the attributes found at the
            current position in the <see cref="T:System.Xml.XmlReader"/>
            .
            </summary>
            <param name="reader">The <see langword="XmlReader"/> from which to copy the attributes.</param>
            <param name="defattr"><see langword="true"/> to copy the default attributes from the <see langword="XmlReader"/> ;otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Xml.XmlException"> The reader is not positioned on an element, attribute or XmlDeclaration node.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, encodes the specified binary bytes as base64 and writes out
            the resulting text.
            </summary>
            <param name="buffer">byte array to encode.</param>
            <param name="index">The position in the buffer indicating the start of the bytes to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, encodes the specified binary bytes as binhex and writes out
            the resulting text.
            </summary>
            <param name="buffer">byte array to encode.</param>
            <param name="index">The position in the buffer indicating the start of the bytes to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteCData(System.String)">
            <summary>
            When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt;block containing
            the specified text.
            </summary>
            <param name="text">The text to place inside the CDATA block.</param>
            <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteCharEntity(System.Char)">
            <summary>
            When overridden in a derived class, forces the
            generation of a character entity for the specified Unicode character value.
            </summary>
            <param name="ch">The Unicode character for which to generate a character entity.</param>
            <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, <see langword="0xd800"/> - <see langword="0xdfff"/>. </exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes text one buffer at a time.
            </summary>
            <param name="buffer"></param>
            <param name="index">The position in the buffer indicating the start of the text to write.</param>
            <param name="count">The number of characters to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>;the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteComment(System.String)">
            <summary>
            When overridden in a derived class, writes out a comment &lt;!--...--&gt;containing
            the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
            <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the DOCTYPE declaration with the specified name
            and optional attributes.
            </summary>
            <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
            <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments.</param>
            <param name="sysid">If pubid is <see langword="null"/> and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument.</param>
            <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
            <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element).</exception>
            <exception cref="T:System.ArgumentException">The value for <paramref name="name "/> would result in invalid XML.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteEndAttribute">
            <summary>
            When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.string,System.string)"/>
            call.
            </summary>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteEndDocument">
            <summary>
            When overridden in a derived class, closes any open elements or attributes and
            puts the writer back in the Start state.
            </summary>
            <exception cref="T:System.ArgumentException">The XML document is invalid.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteEndElement">
            <summary>
            When overridden in a derived class, closes one element and pops the corresponding namespace scope.
            </summary>
            <exception cref="T:System.InvalidOperationException">This results in an invalid XML document.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteEntityRef(System.String)">
            <summary>
            When overridden in a derived class, writes out an entity
            reference as <see langword="&amp;name;"/> .
            </summary>
            <param name="name">The name of the entity reference.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is either <see langword="null"/> or string.Empty.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteFullEndElement">
            <summary>
            When overridden in a derived class, closes one element and pops the
            corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteName(System.String)">
            <summary>
            When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to
            the W3C XML 1.0 recommendation
            (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).
            </summary>
            <param name="name">The name to write.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="name "/>is not a valid XML name;or <paramref name="name"/> is either <see langword="null"/> or string.Empty.
            </exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteNmToken(System.String)">
            <summary>
            When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to
            the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).
            </summary>
            <param name="name">The name to write.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="name "/>is not a valid NmToken;or <paramref name="name"/> is either <see langword="null"/> or string.Empty.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
            <summary>
            When overridden in a derived class, copies everything from the reader to the writer and
            moves the reader to the start of the next
            sibling.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from.</param>
            <param name="defattr"><see langword="true"/> to copy the default attributes from the <see langword="XmlReader"/> ;otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="reader"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            When overridden in a derived class, writes out a processing instruction with a space between
            the name and text as follows: &lt;?name text?&gt;.
            </summary>
            <param name="name">The name of the processing instruction.</param>
            <param name="text"></param>
            <exception cref="T:System.ArgumentException">
                <para> The text would result in a non-well formed XML document.</para>
                <para>
                    <paramref name="name"/> is either <see langword="null"/> or string.Empty.</para>
                <para>This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument"/> has already been called. </para>
            </exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteQualifiedName(System.String,System.String)">
            <summary>
            When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix
            that is in scope for the given namespace.
            </summary>
            <param name="localName">The local name to write.</param>
            <param name="ns"></param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="localName"/> is either <see langword="null"/> or string.Empty.</para>
                <para>
                    <paramref name="localName"/> is not a valid name.</para>
            </exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes raw markup manually from a character buffer.
            </summary>
            <param name="buffer">Character array containing the text to write.</param>
            <param name="index">The position within the buffer indicating the start of the text to write.</param>
            <param name="count">The number of characters to write.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteRaw(System.String)">
            <summary>
            When overridden in a derived class, writes raw markup manually from a string.
            </summary>
            <param name="data">string containing the text to write.</param>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the start of an attribute.
            </summary>
            <param name="prefix">The namespace prefix of the attribute.</param>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteStartDocument">
            <summary>
            When overridden in a derived class, writes the XML declaration with the version "1.0".
            </summary>
            <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteStartDocument(System.Boolean)">
            <summary>
            When overridden in a derived class, writes the XML declaration with the version "1.0" and the
            standalone attribute.
            </summary>
            <param name="standalone">If <see langword="true"/>, it writes "standalone=yes";if <see langword="false"/>, it writes "standalone=no".</param>
            <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the specified start tag and
            associates it with the given namespace and prefix.
            </summary>
            <param name="prefix">The namespace prefix of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI to associate with the element.</param>
            <exception cref="T:System.InvalidOperationException">The writer is closed.</exception>
        </member>
        <member name="P:Foundation.Xml.SimpleXmlTextWriter.WriteState">
            <summary>
            When overridden in a derived class, gets the state of the writer.
            </summary>
            <value></value>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteString(System.String)">
            <summary>
            When overridden in a derived class, writes the given text content.
            </summary>
            <param name="text">The text to write.</param>
            <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            When overridden in a derived class, generates and writes the surrogate character entity
            for the surrogate character pair.
            </summary>
            <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</param>
            <param name="highChar"></param>
            <exception cref="T:System.Exception">An invalid surrogate character pair was passed.</exception>
        </member>
        <member name="M:Foundation.Xml.SimpleXmlTextWriter.WriteWhitespace(System.String)">
            <summary>
            When overridden in a derived class, writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
            <exception cref="T:System.ArgumentException">The string contains non-white space characters.</exception>
        </member>
        <member name="P:Foundation.Xml.SimpleXmlTextWriter.XmlLang">
            <summary>
            When overridden in a derived class, gets the current xml:lang scope.
            </summary>
            <value></value>
        </member>
        <member name="P:Foundation.Xml.SimpleXmlTextWriter.XmlSpace">
            <summary>
            When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace"/> representing the current xml:space scope.
            </summary>
            <value></value>
        </member>
        <member name="T:Foundation.Xml.XmlElementReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Xml.XmlElementReader.#ctor(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:Foundation.Xml.XmlElementReader.ReadStartElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.Xml.XmlElementReader.ReadElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.Xml.XmlSerializerExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Xml.XmlSerializerExtensions.SerializeToXmlString(System.Xml.Serialization.XmlSerializer,System.Xml.XmlWriterSettings,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlSerializer"></param>
            <param name="xmlWriterSettings"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Xml.XmlSerializerHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Xml.XmlSerializerHelper.Deserialize(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Xml.XmlSerializerHelper.Deserialize(System.Xml.XmlReader,System.Type)">
            <summary>
            
            </summary>
            <param name="xmlReader"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Xml.XmlSerializerHelper.Deserialize``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Xml.XmlSerializerHelper.Deserialize``1(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlReader"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Xml.XmlWriterExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Xml.XmlWriterExtensions.WriteElement(System.Xml.XmlWriter,System.String)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
            <param name="localName"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Xml.XmlWriterExtensions.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.XmlSpreadsheet.XmlSpreadsheetAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="localName"></param>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.XmlSpreadsheet.XmlSpreadsheetAttribute.LocalName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.XmlSpreadsheet.XmlSpreadsheetAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetAttribute.Write(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
        </member>
        <member name="T:Foundation.XmlSpreadsheet.XmlSpreadsheetAttributeCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.XmlSpreadsheet.XmlSpreadsheetAttributeCollection.NameIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetAttributeCollection.Add(Foundation.XmlSpreadsheet.XmlSpreadsheetAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Foundation.XmlSpreadsheet.XmlSpreadsheetCell">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetCell.#ctor(Foundation.XmlSpreadsheet.XmlSpreadsheetDataType,System.String)">
            <summary>
            
            </summary>
            <param name="dataType"></param>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.XmlSpreadsheet.XmlSpreadsheetCell.StyleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.XmlSpreadsheet.XmlSpreadsheetCell.MergeAcross">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetCell.Write(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
        </member>
        <member name="T:Foundation.XmlSpreadsheet.XmlSpreadsheetColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetColumn.ColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetColumn.DataType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetColumn.NumberFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetColumn.Width">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetColumn.Convert">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetColumn.ExtendedProperties">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.XmlSpreadsheet.XmlSpreadsheetDataType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetDataType.Number">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetDataType.DateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetDataType.Boolean">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetDataType.String">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetDataType.Error">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.XmlSpreadsheet.XmlSpreadsheetTable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetTable.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.XmlSpreadsheet.XmlSpreadsheetTable.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.XmlSpreadsheet.XmlSpreadsheetWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetWriter.#ctor(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
        </member>
        <member name="P:Foundation.XmlSpreadsheet.XmlSpreadsheetWriter.XmlWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetWriter.WriteStyles(System.Collections.Generic.IEnumerable{Foundation.XmlSpreadsheet.XmlSpreadsheetTable})">
            <summary>
            
            </summary>
            <param name="tables"></param>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetWriter.WriteStartTable(Foundation.XmlSpreadsheet.XmlSpreadsheetTable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetWriter.WriteEndTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetWriter.WriteStartRow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetWriter.WriteEndRow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.XmlSpreadsheet.XmlSpreadsheetWriter.WriteRow(System.Object[])">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Foundation.ArgumentEqualsSelection`1">
            <summary>
            
            </summary>
            <typeparam name="TArgument"></typeparam>
        </member>
        <member name="M:Foundation.ArgumentEqualsSelection`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:Foundation.ArgumentEqualsSelection`1.IfArgumentEquals(`0,System.Action)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.ArgumentEqualsSelection`1.Else(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Foundation.ArgumentIsSelection`1">
            <summary>
            
            </summary>
            <typeparam name="TArgument"></typeparam>
        </member>
        <member name="M:Foundation.ArgumentIsSelection`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:Foundation.ArgumentIsSelection`1.IfArgumentIs``1(System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TArgumentAs"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.ArgumentIsSelection`1.IfArgumentIsNull(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.ArgumentIsSelection`1.If(System.Func{System.Boolean},System.Action)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.ArgumentIsSelection`1.Else(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Foundation.CommandLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.CommandLine.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="commandLine"></param>
        </member>
        <member name="P:Foundation.CommandLine.ListIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.CommandLine.NameIndex">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.CommandLineArgument">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.CommandLineArgument.#ctor(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Foundation.CommandLineArgument.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.CommandLineArgument.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.CommandLineArgument.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Foundation.CurrentDirectoryChanger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.CurrentDirectoryChanger.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Foundation.Disposer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Disposer.#ctor(System.Action)">
            <summary>
            
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="T:Foundation.Enum`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Foundation.Enum`1.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Enum`1.ToNullableEnum(System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.FunctionComposition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.FunctionComposition.Compose``3(System.Func{``0,``1},System.Func{``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <typeparam name="Z"></typeparam>
            <param name="func1"></param>
            <param name="func2"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Library">
            <exclude/>
        </member>
        <member name="M:Foundation.Library.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Foundation.Library.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Library.LoadString(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.LocalTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.LocalTime.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="increment"></param>
            <param name="adjustment"></param>
        </member>
        <member name="P:Foundation.LocalTime.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.LocalTime.Now">
            <summary>
            Gets the current date and time on this computer, expressed as the local time.
            The system clock resolution can be 1.000 - 15.600 millseconds.
            </summary>
        </member>
        <member name="T:Foundation.NativeMethods">
            <exclude/>
            <summary>
            Wrapper class for some NativeMethods. API functions (KERNEL32.DLL, USER32.DLL)
            and constants declared in WinUser.h.
            </summary>
        </member>
        <member name="T:Foundation.NativeMethods.MoveFileExFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.NativeMethods.MoveFileExFlags.ReplaceExisiting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.NativeMethods.MoveFileExFlags.CopyAllowed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.NativeMethods.MoveFileExFlags.DelayUntilReboot">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.NativeMethods.MoveFileExFlags.WriteThrough">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.NativeMethods.MoveFileExFlags.CreateHardLink">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.NativeMethods.MoveFileExFlags.FailIfNotTrackable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.NativeMethods.MoveFileEx(System.String,System.String,Foundation.NativeMethods.MoveFileExFlags)">
            <summary>
            
            </summary>
            <param name="lpExistingFileName"></param>
            <param name="lpNewFileName"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.NativeMethods.StgOpenStorage(System.String,Foundation.IStorage,Foundation.STGM,System.IntPtr,System.UInt32,Foundation.IStorage@)">
            <summary>Opens a compound document file and represents it as an IStorage object</summary>
            <remarks>Use on Windows 2000 and earlier</remarks>
            <param name="pwcsName">The path and filename of the file to open</param>
            <param name="pstgPriority">Generally passed as null</param>
            <param name="grfMode">Access Method</param>
            <param name="snbExclude">Must be NULL</param>
            <param name="reserved">Pass as zero (0)</param>
            <param name="ppstgOpen">out IStorage</param>
            <returns>int HRESULT</returns>
            Needs more help form MS
        </member>
        <member name="T:Foundation.NotNullable`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Foundation.NotNullable`1.HasValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.NotNullable`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.NotNullable`1.op_Implicit(`0)~Foundation.NotNullable{`0}">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.NotNullable`1.op_Implicit(Foundation.NotNullable{`0})~`0">
            <summary>
            
            </summary>
            <param name="notNullable"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.NotNullableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.NotNullableExtensions.ToNotNullable``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.Selection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.Selection.CreateArgumentEqualsSelection``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Selection.CreateArgumentIsSelection``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Selection.CreateTypeIsSelection(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Selection.Select(System.Func{System.Boolean}[])">
            <summary>
            
            </summary>
            <param name="selections"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Selection.Select``2(``0,``1,System.Func{System.Type,System.Action{``1}})">
            <summary>
            
            </summary>
            <typeparam name="TArgument"></typeparam>
            <typeparam name="TActionArgument"></typeparam>
            <param name="argument"></param>
            <param name="actionArgument"></param>
            <param name="getAction"></param>
        </member>
        <member name="M:Foundation.Selection.IfArgumentAsNotNull``2(``0,System.Action{``1})">
            <summary>
            
            </summary>
            <typeparam name="TArgument"></typeparam>
            <typeparam name="TArgumentAs"></typeparam>
            <param name="argument"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Selection.IfArgumentTypeEquals``1(System.Type,System.Action)">
            <summary>
            
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="type"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Selection.IfArgumentIs``2(``0,System.Action{``1})">
            <summary>
            
            </summary>
            <typeparam name="TSourceType"></typeparam>
            <typeparam name="TTargetType"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:Foundation.Selection.Else(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.Selection.ExecuteIfArgumentTypeEquals``1(System.Type,System.Action)">
            <summary>
            
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="type"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.MultipleDispatchSelection`1">
            <summary>
            
            </summary>
            <typeparam name="TArgument"></typeparam>
        </member>
        <member name="M:Foundation.MultipleDispatchSelection`1.#ctor(System.Func{`0,System.Boolean}[])">
            <summary>
            
            </summary>
            <param name="selections"></param>
        </member>
        <member name="M:Foundation.MultipleDispatchSelection`1.Select(`0)">
            <summary>
            
            </summary>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.SmallDate">
            <summary>
            16 bit date type: 1990-01-01 - 2079-06-06
            </summary>
        </member>
        <member name="F:Foundation.SmallDate.MinDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.SmallDate.MaxDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.SmallDate.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.SmallDate.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.SmallDate.#ctor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:Foundation.SmallDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
        </member>
        <member name="M:Foundation.SmallDate.Today(Foundation.IDateTimeProvider)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.SmallDate.Year">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.SmallDate.Month">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.SmallDate.Day">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.SmallDate.op_Explicit(System.DateTime)~Foundation.SmallDate">
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.SmallDate.op_Addition(Foundation.SmallDate,System.Int32)">
            <summary>
            
            </summary>
            <param name="smallDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.SmallDate.op_Subtraction(Foundation.SmallDate,Foundation.SmallDate)">
            <summary>
            
            </summary>
            <param name="smallDate1"></param>
            <param name="smallDate2"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.SmallDate.ToDateTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.SmallDate.AddDays(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.SmallDate.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundation.SmallDate.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.SmallTimeSpan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.SmallTimeSpan.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Foundation.SmallTimeSpan.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.SmallTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="timeSpan"></param>
        </member>
        <member name="P:Foundation.SmallTimeSpan.TotalMinutes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.SmallTimeSpan.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundation.StringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.StringExtensions.AsList(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.Format(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.Format(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="provider"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.ParseToNullableDateTime(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.ParseToNullableDateTime(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.ParseToNullableDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="provider"></param>
            <param name="styles"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.ParseExactToNullableDateTime(System.String,System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.ParseToNullableDecimal(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.ParseToNullableDecimal(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.ParseToNullableDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="style"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.ParseToNullableInt32(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Foundation.UniversalTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.UniversalTime.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="increment">increment interval in milliseconds</param>
            <param name="adjustment">adjustement interval in millseconds</param>
        </member>
        <member name="P:Foundation.UniversalTime.TickCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Foundation.UniversalTime.Default">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.UniversalTime.GetTickCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Foundation.UniversalTime.UtcNow">
            <summary>
            Gets the current date and time on this computer, expressed as the local time.
            The system clock resolution can be 1.000 - 15.600 millseconds.
            </summary>
        </member>
        <member name="T:Foundation.TypeIsSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Foundation.TypeIsSelection.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Foundation.TypeIsSelection.IfTypeIs``1(System.Action)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Foundation.TypeIsSelection.Else(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
    </members>
</doc>
